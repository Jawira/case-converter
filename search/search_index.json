{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Case converter Use this library to convert string between: Name Method Output example \ud83d\udc2a Camel case toCamel() myNameIsBond \ud83d\udc68\u200d\ud83c\udfeb Pascal case toPascal() MyNameIsBond \ud83d\udc0d Snake case toSnake() my_name_is_bond \ud83d\udc69\u200d\ud83c\udfeb Ada case toAda() My_Name_Is_Bond \u24c2\ufe0f Macro case toMacro() MY_NAME_IS_BOND \ud83e\udd59 Kebab case toKebab() my-name-is-bond \ud83d\ude82 Train case toTrain() My-Name-Is-Bond \ud83c\udfe6 Cobol case toCobol() MY-NAME-IS-BOND \ud83d\udd21 Lower case toLower() my name is bond \ud83d\udd20 Upper case toUpper() MY NAME IS BOND \ud83d\udcf0 Title case toTitle() My Name Is Bond \u270d\ufe0f Sentence case toSentence() My name is bond Features: \ud83d\udd01 automatic case detection \ud83c\udf10 i18n Usage use Jawira\\CaseConverter\\Convert; $hero = new Convert('john-connor'); echo $hero- toCamel(); // output: johnConnor echo $hero- toSnake(); // output: john_connor Note: Input string (i.e. john-connor ) format is going to be detected automatically. You can see a list of all public methods . i18n Fully compatible with non-english alphabets: // Spanish $esp = new Convert('DON_RAM\u00d3N_Y_\u00d1O\u00d1O'); echo $esp- toCamel(); // output: donRam\u00f3nY\u00d1o\u00f1o // Greek $grc = new Convert('\u03c0\u03bf\u03bb\u03cd-\u039a\u03b1\u03bb\u03cc'); echo $grc- toCamel(); // output: \u03c0\u03bf\u03bb\u03cd\u039a\u03b1\u03bb\u03cc // Russian $rus = new Convert('\u041e\u0427\u0415\u041d\u042c_\u041f\u0420\u0418\u042f\u0422\u041d\u041e'); echo $rus- toCamel(); // output: \u043e\u0447\u0435\u043d\u044c\u041f\u0440\u0438\u044f\u0442\u043d\u043e Full case mapping (only from PHP 7.3 ): // German $ger = new Convert('Stra\u00dfe'); echo $ger- toUpper(); // output: STRASSE // Turkish (requires appropriate locale) $tur = new Convert('istambul'); echo $tur- toTrain(); // output: \u0130stanbul Learn more about Full Case-Mapping . Installation $ composer require jawira/case-converter Documentation https://jawira.github.io/case-converter/ License This library is licensed under the MIT LICENSE .","title":"Home"},{"location":"index.html#case-converter","text":"Use this library to convert string between: Name Method Output example \ud83d\udc2a Camel case toCamel() myNameIsBond \ud83d\udc68\u200d\ud83c\udfeb Pascal case toPascal() MyNameIsBond \ud83d\udc0d Snake case toSnake() my_name_is_bond \ud83d\udc69\u200d\ud83c\udfeb Ada case toAda() My_Name_Is_Bond \u24c2\ufe0f Macro case toMacro() MY_NAME_IS_BOND \ud83e\udd59 Kebab case toKebab() my-name-is-bond \ud83d\ude82 Train case toTrain() My-Name-Is-Bond \ud83c\udfe6 Cobol case toCobol() MY-NAME-IS-BOND \ud83d\udd21 Lower case toLower() my name is bond \ud83d\udd20 Upper case toUpper() MY NAME IS BOND \ud83d\udcf0 Title case toTitle() My Name Is Bond \u270d\ufe0f Sentence case toSentence() My name is bond Features: \ud83d\udd01 automatic case detection \ud83c\udf10 i18n","title":"Case converter"},{"location":"index.html#usage","text":"use Jawira\\CaseConverter\\Convert; $hero = new Convert('john-connor'); echo $hero- toCamel(); // output: johnConnor echo $hero- toSnake(); // output: john_connor Note: Input string (i.e. john-connor ) format is going to be detected automatically. You can see a list of all public methods .","title":"Usage"},{"location":"index.html#i18n","text":"Fully compatible with non-english alphabets: // Spanish $esp = new Convert('DON_RAM\u00d3N_Y_\u00d1O\u00d1O'); echo $esp- toCamel(); // output: donRam\u00f3nY\u00d1o\u00f1o // Greek $grc = new Convert('\u03c0\u03bf\u03bb\u03cd-\u039a\u03b1\u03bb\u03cc'); echo $grc- toCamel(); // output: \u03c0\u03bf\u03bb\u03cd\u039a\u03b1\u03bb\u03cc // Russian $rus = new Convert('\u041e\u0427\u0415\u041d\u042c_\u041f\u0420\u0418\u042f\u0422\u041d\u041e'); echo $rus- toCamel(); // output: \u043e\u0447\u0435\u043d\u044c\u041f\u0440\u0438\u044f\u0442\u043d\u043e Full case mapping (only from PHP 7.3 ): // German $ger = new Convert('Stra\u00dfe'); echo $ger- toUpper(); // output: STRASSE // Turkish (requires appropriate locale) $tur = new Convert('istambul'); echo $tur- toTrain(); // output: \u0130stanbul Learn more about Full Case-Mapping .","title":"i18n"},{"location":"index.html#installation","text":"$ composer require jawira/case-converter","title":"Installation"},{"location":"index.html#documentation","text":"https://jawira.github.io/case-converter/","title":"Documentation"},{"location":"index.html#license","text":"This library is licensed under the MIT LICENSE .","title":"License"},{"location":"api.html","text":"API List of \\Jawira\\CaseConverter\\Convert public methods. String conversion Method Description toCamel() Return string in Camel case toPascal() Return string in Pascal case toSnake() Return string in Snake case toAda() Return string in Ada case toMacro() Return string in Macro case toKebab() Return string in Kebab case toTrain() Return string in Train case toCobol() Return string in Cobol case toLower() Return string in Lower case toUpper() Return string in Upper case toTitle() Return string in Title case toSentence() Return string in Sentence case Explicit case detection Method Description fromAuto() (default) Auto-detect naming convention fromCamel() Split input string using uppercase characters fromPascal() Split input string using uppercase characters fromSnake() Split input string using _ (underscore character) fromAda() Split input string using _ (underscore character) fromMacro() Split input string using _ (underscore character) fromKebab() Split input string using - (dash character) fromTrain() Split input string using - (dash character) fromCobol() Split input string using - (dash character) fromLower() Split input string using \u2423 (space character) fromUpper() Split input string using \u2423 (space character) fromTitle() Split input string using \u2423 (space character) fromSentence() Split input string using \u2423 (space character) Please note that some methods are equivalent and have the same effect: fromCamel() \u2248 fromPascal() fromSnake() \u2248 fromAda() \u2248 fromMacro() fromKebab() \u2248 fromTrain() \u2248 fromCobol() fromLower() \u2248 fromUpper() \u2248 fromTitle() \u2248 fromSentence() All these methods exists only for sake of completeness. Utility methods Method Description toArray() Returns array with detected words","title":"Api"},{"location":"api.html#api","text":"List of \\Jawira\\CaseConverter\\Convert public methods.","title":"API"},{"location":"api.html#string-conversion","text":"Method Description toCamel() Return string in Camel case toPascal() Return string in Pascal case toSnake() Return string in Snake case toAda() Return string in Ada case toMacro() Return string in Macro case toKebab() Return string in Kebab case toTrain() Return string in Train case toCobol() Return string in Cobol case toLower() Return string in Lower case toUpper() Return string in Upper case toTitle() Return string in Title case toSentence() Return string in Sentence case","title":"String conversion"},{"location":"api.html#explicit-case-detection","text":"Method Description fromAuto() (default) Auto-detect naming convention fromCamel() Split input string using uppercase characters fromPascal() Split input string using uppercase characters fromSnake() Split input string using _ (underscore character) fromAda() Split input string using _ (underscore character) fromMacro() Split input string using _ (underscore character) fromKebab() Split input string using - (dash character) fromTrain() Split input string using - (dash character) fromCobol() Split input string using - (dash character) fromLower() Split input string using \u2423 (space character) fromUpper() Split input string using \u2423 (space character) fromTitle() Split input string using \u2423 (space character) fromSentence() Split input string using \u2423 (space character) Please note that some methods are equivalent and have the same effect: fromCamel() \u2248 fromPascal() fromSnake() \u2248 fromAda() \u2248 fromMacro() fromKebab() \u2248 fromTrain() \u2248 fromCobol() fromLower() \u2248 fromUpper() \u2248 fromTitle() \u2248 fromSentence() All these methods exists only for sake of completeness.","title":"Explicit case detection"},{"location":"api.html#utility-methods","text":"Method Description toArray() Returns array with detected words","title":"Utility methods"},{"location":"changelog.html","text":"Changelog All notable changes to this project will be documented in this file. Unreleased v3.0.0 - 2019-06-30 Added #36 Static site with documentation https://jawira.github.io/case-converter/build.png #30 Added functions to explicitly set the naming conventions of input string: fromAuto() , fromCamel() , fromPascal() , fromSnake() , fromAda() , fromMacro() , fromKebab() , fromTrain() , fromCobol() , fromLower() , fromUpper() , fromTitle() , and fromSentence() . Removed #37 Removed deprecated functions: Convert::__toString() and Convert::count() v2.3.0 - 2019-06-15 Changed #35 Big refactoring in library's structure, user should not notice this changes Deprecated #35 \\Jawira\\CaseConverter\\Convert::__toString #35 \\Jawira\\CaseConverter\\Convert::count Removed #35 Lot of constants have been removed from Convert class: ENCODING, DASH, EMPTY_STRING, SPACE, UNDERSCORE, STRATEGY_DASH, STRATEGY_SPACE, STRATEGY_UNDERSCORE, STRATEGY_UPPERCASE, ADA, CAMEL, COBOL, KEBAB, LOWER, MACRO, PASCAL, SENTENCE, SNAKE, TITLE, TRAIN, UPPER. v2.2.0 - 2019-05-30 Added #33 Added support for space based naming conventions: Title case, Sentence case, Upper case, and Lower case. v2.1.0 - 2019-05-10 Added #26 New method to get array with words extracted from original string \\Jawira\\CaseConverter\\Convert::toArray PHPLoc target in buildfile #31 Implement countable interface v2.0.4 - 2019-04-04 Changed #24 Improving PHPUnit tests #29 Adding PHPPackages badges v2.0.3 - 2019-03-30 Added #22 Code Climate integration v2.0.2 - 2019-03-29 Changed #24 Re-writing PHPUnit tests Added #27 Travis-ci integration v2.0.1 - 2019-03-28 Changed #25 Updated readme file v2.0.0 - 2019-03-26 Changed #21 New methods to convert strings between: Snake case, Camel case, Kebab case, Pascal case, Ada case, Train case, Cobol case and Macro case #21 Behat tests have been adapted for new CaseConverter signatures v1.2.0 - 2019-03-18 Added #19 Handling Kebab case #18 Armenian behat tests #18 Swedish behat tests v1.1.7 - 2019-02-18 Added Waffle.io badge in README.md #16 Use Phive to download Phar files #11 Created CaseConverterException Fixed #17 Fixing PHPStan error v1.1.6 - 2018-12-15 Fixed Phing uses http_proxy behind a proxy to download Behat, PHPUnit and Composer. v1.1.5 - 2018-10-18 Added New Phing target for Behat tests Changed Moved PHPUnit and Behat files to tests dir Renaming some Phing targets Removed Behat was removed from composer.json , instead, bin/behat is used. v1.1.4 - 2018-10-06 Fixed Fixed support for multilingual strings: spanish, greek, cyrillic, etc. v1.1.3 - 2018-10-04 Added Added pds/skeleton badge in README.md Added pds/skeleton as suggestion in composer.json Added behat tests #9 Fixed Fixed bug with invalid Pascal Case #12 v1.1.2 - 2018-09-23 Added Crated Phing visualisation build.png Fixed Un-versioning composer.lock v1.1.1 - 2018-09-23 Fixed Un-versioning composer.lock v1.1.0 - 2018-01-29 Added Build tools (Makefile Phing) Fixed Bug with spanish characters ( issue #6 ) v1.0.1 - 2017-11-10 Added Unitary tests Unitary tests for spanish characters Fixed Bug with acronyms ( issue #5 ) v1.0.0 - 2017-10-27 Changed Slight changes on README.md Removed PHPUnit and pds/skeleton dependencies [v0.0.0] - 2017-10-26 Added Composer support Changed Directory structure has been modified to adapt it to Packagist Removed Deleted Convert::old_camelToSnake() Deleted Convert::old_snakeToCamel()","title":"Changelog"},{"location":"changelog.html#changelog","text":"All notable changes to this project will be documented in this file.","title":"Changelog"},{"location":"changelog.html#unreleased","text":"","title":"Unreleased"},{"location":"changelog.html#v300-2019-06-30","text":"","title":"v3.0.0 - 2019-06-30"},{"location":"changelog.html#added","text":"#36 Static site with documentation https://jawira.github.io/case-converter/build.png #30 Added functions to explicitly set the naming conventions of input string: fromAuto() , fromCamel() , fromPascal() , fromSnake() , fromAda() , fromMacro() , fromKebab() , fromTrain() , fromCobol() , fromLower() , fromUpper() , fromTitle() , and fromSentence() .","title":"Added"},{"location":"changelog.html#removed","text":"#37 Removed deprecated functions: Convert::__toString() and Convert::count()","title":"Removed"},{"location":"changelog.html#v230-2019-06-15","text":"","title":"v2.3.0 - 2019-06-15"},{"location":"changelog.html#changed","text":"#35 Big refactoring in library's structure, user should not notice this changes","title":"Changed"},{"location":"changelog.html#deprecated","text":"#35 \\Jawira\\CaseConverter\\Convert::__toString #35 \\Jawira\\CaseConverter\\Convert::count","title":"Deprecated"},{"location":"changelog.html#removed_1","text":"#35 Lot of constants have been removed from Convert class: ENCODING, DASH, EMPTY_STRING, SPACE, UNDERSCORE, STRATEGY_DASH, STRATEGY_SPACE, STRATEGY_UNDERSCORE, STRATEGY_UPPERCASE, ADA, CAMEL, COBOL, KEBAB, LOWER, MACRO, PASCAL, SENTENCE, SNAKE, TITLE, TRAIN, UPPER.","title":"Removed"},{"location":"changelog.html#v220-2019-05-30","text":"","title":"v2.2.0 - 2019-05-30"},{"location":"changelog.html#added_1","text":"#33 Added support for space based naming conventions: Title case, Sentence case, Upper case, and Lower case.","title":"Added"},{"location":"changelog.html#v210-2019-05-10","text":"","title":"v2.1.0 - 2019-05-10"},{"location":"changelog.html#added_2","text":"#26 New method to get array with words extracted from original string \\Jawira\\CaseConverter\\Convert::toArray PHPLoc target in buildfile #31 Implement countable interface","title":"Added"},{"location":"changelog.html#v204-2019-04-04","text":"","title":"v2.0.4 - 2019-04-04"},{"location":"changelog.html#changed_1","text":"#24 Improving PHPUnit tests #29 Adding PHPPackages badges","title":"Changed"},{"location":"changelog.html#v203-2019-03-30","text":"","title":"v2.0.3 - 2019-03-30"},{"location":"changelog.html#added_3","text":"#22 Code Climate integration","title":"Added"},{"location":"changelog.html#v202-2019-03-29","text":"","title":"v2.0.2 - 2019-03-29"},{"location":"changelog.html#changed_2","text":"#24 Re-writing PHPUnit tests","title":"Changed"},{"location":"changelog.html#added_4","text":"#27 Travis-ci integration","title":"Added"},{"location":"changelog.html#v201-2019-03-28","text":"","title":"v2.0.1 - 2019-03-28"},{"location":"changelog.html#changed_3","text":"#25 Updated readme file","title":"Changed"},{"location":"changelog.html#v200-2019-03-26","text":"","title":"v2.0.0 - 2019-03-26"},{"location":"changelog.html#changed_4","text":"#21 New methods to convert strings between: Snake case, Camel case, Kebab case, Pascal case, Ada case, Train case, Cobol case and Macro case #21 Behat tests have been adapted for new CaseConverter signatures","title":"Changed"},{"location":"changelog.html#v120-2019-03-18","text":"","title":"v1.2.0 - 2019-03-18"},{"location":"changelog.html#added_5","text":"#19 Handling Kebab case #18 Armenian behat tests #18 Swedish behat tests","title":"Added"},{"location":"changelog.html#v117-2019-02-18","text":"","title":"v1.1.7 - 2019-02-18"},{"location":"changelog.html#added_6","text":"Waffle.io badge in README.md #16 Use Phive to download Phar files #11 Created CaseConverterException","title":"Added"},{"location":"changelog.html#fixed","text":"#17 Fixing PHPStan error","title":"Fixed"},{"location":"changelog.html#v116-2018-12-15","text":"","title":"v1.1.6 - 2018-12-15"},{"location":"changelog.html#fixed_1","text":"Phing uses http_proxy behind a proxy to download Behat, PHPUnit and Composer.","title":"Fixed"},{"location":"changelog.html#v115-2018-10-18","text":"","title":"v1.1.5 - 2018-10-18"},{"location":"changelog.html#added_7","text":"New Phing target for Behat tests","title":"Added"},{"location":"changelog.html#changed_5","text":"Moved PHPUnit and Behat files to tests dir Renaming some Phing targets","title":"Changed"},{"location":"changelog.html#removed_2","text":"Behat was removed from composer.json , instead, bin/behat is used.","title":"Removed"},{"location":"changelog.html#v114-2018-10-06","text":"","title":"v1.1.4 - 2018-10-06"},{"location":"changelog.html#fixed_2","text":"Fixed support for multilingual strings: spanish, greek, cyrillic, etc.","title":"Fixed"},{"location":"changelog.html#v113-2018-10-04","text":"","title":"v1.1.3 - 2018-10-04"},{"location":"changelog.html#added_8","text":"Added pds/skeleton badge in README.md Added pds/skeleton as suggestion in composer.json Added behat tests #9","title":"Added"},{"location":"changelog.html#fixed_3","text":"Fixed bug with invalid Pascal Case #12","title":"Fixed"},{"location":"changelog.html#v112-2018-09-23","text":"","title":"v1.1.2 - 2018-09-23"},{"location":"changelog.html#added_9","text":"Crated Phing visualisation build.png","title":"Added"},{"location":"changelog.html#fixed_4","text":"Un-versioning composer.lock","title":"Fixed"},{"location":"changelog.html#v111-2018-09-23","text":"","title":"v1.1.1 - 2018-09-23"},{"location":"changelog.html#fixed_5","text":"Un-versioning composer.lock","title":"Fixed"},{"location":"changelog.html#v110-2018-01-29","text":"","title":"v1.1.0 - 2018-01-29"},{"location":"changelog.html#added_10","text":"Build tools (Makefile Phing)","title":"Added"},{"location":"changelog.html#fixed_6","text":"Bug with spanish characters ( issue #6 )","title":"Fixed"},{"location":"changelog.html#v101-2017-11-10","text":"","title":"v1.0.1 - 2017-11-10"},{"location":"changelog.html#added_11","text":"Unitary tests Unitary tests for spanish characters","title":"Added"},{"location":"changelog.html#fixed_7","text":"Bug with acronyms ( issue #5 )","title":"Fixed"},{"location":"changelog.html#v100-2017-10-27","text":"","title":"v1.0.0 - 2017-10-27"},{"location":"changelog.html#changed_6","text":"Slight changes on README.md","title":"Changed"},{"location":"changelog.html#removed_3","text":"PHPUnit and pds/skeleton dependencies","title":"Removed"},{"location":"changelog.html#v000-2017-10-26","text":"","title":"[v0.0.0] - 2017-10-26"},{"location":"changelog.html#added_12","text":"Composer support","title":"Added"},{"location":"changelog.html#changed_7","text":"Directory structure has been modified to adapt it to Packagist","title":"Changed"},{"location":"changelog.html#removed_4","text":"Deleted Convert::old_camelToSnake() Deleted Convert::old_snakeToCamel()","title":"Removed"},{"location":"contributing.html","text":"Contributing Contributions in the form of \u270dIssues and \ud83d\udee0Pull requests are welcomed and encouraged. How to contribute In order to contribute to this project: Fork this repository Create a new branch and commit your feature or bugfix Once you have finished, create a Pull Request to merge your changes into remote's develop branch Do not forget to add your name at the end of this file. Recommendations This project adheres to: Contributor Covenant : A Code of Conduct for Open Source Projects Keep a Changelog : Good practices for changelog file pds/skeleton : Standard PHP package skeleton Vincent Driessen's branching model : A branching model for Git Semantic Versioning : Simple rules for version numbers It's encouraged to use: The seven rules of a great Git commit message : How to Write a good Git Commit Message git-flow : Git extensions to provide high-level repository operations for Vincent Driessen's branching model Contributors The following individuals have contributed to this project: (add your name here)","title":"Contributing"},{"location":"contributing.html#contributing","text":"Contributions in the form of \u270dIssues and \ud83d\udee0Pull requests are welcomed and encouraged.","title":"Contributing"},{"location":"contributing.html#how-to-contribute","text":"In order to contribute to this project: Fork this repository Create a new branch and commit your feature or bugfix Once you have finished, create a Pull Request to merge your changes into remote's develop branch Do not forget to add your name at the end of this file.","title":"How to contribute"},{"location":"contributing.html#recommendations","text":"This project adheres to: Contributor Covenant : A Code of Conduct for Open Source Projects Keep a Changelog : Good practices for changelog file pds/skeleton : Standard PHP package skeleton Vincent Driessen's branching model : A branching model for Git Semantic Versioning : Simple rules for version numbers It's encouraged to use: The seven rules of a great Git commit message : How to Write a good Git Commit Message git-flow : Git extensions to provide high-level repository operations for Vincent Driessen's branching model","title":"Recommendations"},{"location":"contributing.html#contributors","text":"The following individuals have contributed to this project: (add your name here)","title":"Contributors"},{"location":"detection-algorithm.html","text":"Detection algorithm When \\Jawira\\CaseConverter\\Convert class is instantiated, the input string is analysed to detect the words in it. This is also the algorithm used by Convert::fromAuto method. If input string contains _ (underscore character), then _ is used to split string. If input string contains - (dash character), then - is used to split string. If input string contains \u2423 (space character), then \u2423 is used to split string. If input string contains uppercase characters only, then the input string is considered to be a single word. Finally, uppercase characters are used to split string.","title":"Detection algorithm"},{"location":"detection-algorithm.html#detection-algorithm","text":"When \\Jawira\\CaseConverter\\Convert class is instantiated, the input string is analysed to detect the words in it. This is also the algorithm used by Convert::fromAuto method. If input string contains _ (underscore character), then _ is used to split string. If input string contains - (dash character), then - is used to split string. If input string contains \u2423 (space character), then \u2423 is used to split string. If input string contains uppercase characters only, then the input string is considered to be a single word. Finally, uppercase characters are used to split string.","title":"Detection algorithm"},{"location":"dev.html","text":"Development Phing targets $ phing setup : Prepare project for development. $ phing qa : Run quality tests, use this before every commit. $ phing refresh : Update generated files (changelog, images, etc). Dev requirements To use Phing tasks you need to previously install: Phive mkdocs Using Phing behind a proxy If you are developing behind a proxy, you have to set the environment variable http_proxy . This variable is imported in buildfile. Conventions This project adheres to: git-flow Semantic Versioning Keep a changelog pds/skeleton","title":"Dev"},{"location":"dev.html#development","text":"","title":"Development"},{"location":"dev.html#phing-targets","text":"$ phing setup : Prepare project for development. $ phing qa : Run quality tests, use this before every commit. $ phing refresh : Update generated files (changelog, images, etc).","title":"Phing targets"},{"location":"dev.html#dev-requirements","text":"To use Phing tasks you need to previously install: Phive mkdocs","title":"Dev requirements"},{"location":"dev.html#using-phing-behind-a-proxy","text":"If you are developing behind a proxy, you have to set the environment variable http_proxy . This variable is imported in buildfile.","title":"Using Phing behind a proxy"},{"location":"dev.html#conventions","text":"This project adheres to: git-flow Semantic Versioning Keep a changelog pds/skeleton","title":"Conventions"},{"location":"examples.html","text":"Examples Basic usage Code: ?php declare(strict_types=1); require __DIR__ . '/vendor/autoload.php'; use Jawira\\CaseConverter\\Convert; $robot = new Convert('The-Terminator'); echo $robot- toPascal() . PHP_EOL; echo $robot- toCobol() . PHP_EOL; echo $robot- toSnake() . PHP_EOL; Output: TheTerminator THE-TERMINATOR the_terminator Explicit case detection Code: ?php declare(strict_types=1); require __DIR__ . '/vendor/autoload.php'; use Jawira\\CaseConverter\\Convert; $agency = new Convert('FBI'); echo $agency- fromAda() - toCobol() . PHP_EOL; // output: FBI echo $agency- toSnake() . PHP_EOL; // output: fbi echo $agency- fromCamel() - toCobol() . PHP_EOL; // output: F-B-I echo $agency- toSnake() . PHP_EOL; // output: f_b_i echo $agency- fromAuto() - toCobol() . PHP_EOL; // output: FBI echo $agency- toSnake() . PHP_EOL; // output: fbi Output: FBI fbi F-B-I f_b_i FBI fbi","title":"Examples"},{"location":"examples.html#examples","text":"","title":"Examples"},{"location":"examples.html#basic-usage","text":"Code: ?php declare(strict_types=1); require __DIR__ . '/vendor/autoload.php'; use Jawira\\CaseConverter\\Convert; $robot = new Convert('The-Terminator'); echo $robot- toPascal() . PHP_EOL; echo $robot- toCobol() . PHP_EOL; echo $robot- toSnake() . PHP_EOL; Output: TheTerminator THE-TERMINATOR the_terminator","title":"Basic usage"},{"location":"examples.html#explicit-case-detection","text":"Code: ?php declare(strict_types=1); require __DIR__ . '/vendor/autoload.php'; use Jawira\\CaseConverter\\Convert; $agency = new Convert('FBI'); echo $agency- fromAda() - toCobol() . PHP_EOL; // output: FBI echo $agency- toSnake() . PHP_EOL; // output: fbi echo $agency- fromCamel() - toCobol() . PHP_EOL; // output: F-B-I echo $agency- toSnake() . PHP_EOL; // output: f_b_i echo $agency- fromAuto() - toCobol() . PHP_EOL; // output: FBI echo $agency- toSnake() . PHP_EOL; // output: fbi Output: FBI fbi F-B-I f_b_i FBI fbi","title":"Explicit case detection"},{"location":"known-issues.html","text":"Known issues Number handling When using case-converter you cannot use a number as separator. In practice this means that a number is not considered as a word: As shown in the previous example, there is no way to go back to the original input string (i.e. hello-8-world ), in kebab case this sting is written as hello8-world . Full case-mapping PHP 7.3 introduced Full Case-Mapping , in practice this means than you can have different results depending on your PHP version. $german = new Convert('Stra\u00dfe'); echo $german- toUpper(); // Produces STRA\u00dfE on PHP 7.2 // Produces STRASSE on PHP 7.3 Internally Case-Converter uses mb_convert_case() , this function uses the following constants: MB_CASE_LOWER MB_CASE_TITLE MB_CASE_UPPER The problem is that, Before PHP 7.3 , these constants perform simple case-mapping and after PHP 7.3 perform full case-mapping. If you want to maintain the old functionality after PHP 7.3 , then you have to use MB_CASE_LOWER_SIMPLE , MB_CASE_UPPER_SIMPLE , and MB_CASE_TITLE_SIMPLE . Of course these variables doesnt exist yet before PHP 7.3 . IMHO this is a breaking change , PHP people should have keep untouched old constants and create new ones for full case-mapping , for example: MB_CASE_LOWER_FULL , MB_CASE_TITLE_FULL , and MB_CASE_UPPER_FULL (please note these variables do not exist).","title":"Known issues"},{"location":"known-issues.html#known-issues","text":"","title":"Known issues"},{"location":"known-issues.html#number-handling","text":"When using case-converter you cannot use a number as separator. In practice this means that a number is not considered as a word: As shown in the previous example, there is no way to go back to the original input string (i.e. hello-8-world ), in kebab case this sting is written as hello8-world .","title":"Number handling"},{"location":"known-issues.html#full-case-mapping","text":"PHP 7.3 introduced Full Case-Mapping , in practice this means than you can have different results depending on your PHP version. $german = new Convert('Stra\u00dfe'); echo $german- toUpper(); // Produces STRA\u00dfE on PHP 7.2 // Produces STRASSE on PHP 7.3 Internally Case-Converter uses mb_convert_case() , this function uses the following constants: MB_CASE_LOWER MB_CASE_TITLE MB_CASE_UPPER The problem is that, Before PHP 7.3 , these constants perform simple case-mapping and after PHP 7.3 perform full case-mapping. If you want to maintain the old functionality after PHP 7.3 , then you have to use MB_CASE_LOWER_SIMPLE , MB_CASE_UPPER_SIMPLE , and MB_CASE_TITLE_SIMPLE . Of course these variables doesnt exist yet before PHP 7.3 . IMHO this is a breaking change , PHP people should have keep untouched old constants and create new ones for full case-mapping , for example: MB_CASE_LOWER_FULL , MB_CASE_TITLE_FULL , and MB_CASE_UPPER_FULL (please note these variables do not exist).","title":"Full case-mapping"},{"location":"license.html","text":"The MIT License (MIT) Copyright \u00a9 2015 Jawira Portugal Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license.html#the-mit-license-mit","text":"Copyright \u00a9 2015 Jawira Portugal Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"},{"location":"naming-conventions.html","text":"Naming conventions I will explain all about naming conventions here, not ready yet. Resources https://dev.to/prahladyeri/underscores-camelcasing-and-pascalcasing-the-three-naming-conventions-every-programmer-should-be-aware-of-3aed","title":"Naming conventions"},{"location":"naming-conventions.html#naming-conventions","text":"I will explain all about naming conventions here, not ready yet.","title":"Naming conventions"},{"location":"naming-conventions.html#resources","text":"https://dev.to/prahladyeri/underscores-camelcasing-and-pascalcasing-the-three-naming-conventions-every-programmer-should-be-aware-of-3aed","title":"Resources"}]}