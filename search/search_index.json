{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Case converter Use this library to convert string between: Name Method Output example \ud83d\udc2a Camel case toCamel() myNameIsBond \ud83d\udc68\u200d\ud83c\udfeb Pascal case toPascal() MyNameIsBond \ud83d\udc0d Snake case toSnake() my_name_is_bond \ud83d\udc69\u200d\ud83c\udfeb Ada case toAda() My_Name_Is_Bond \u24c2\ufe0f Macro case toMacro() MY_NAME_IS_BOND \ud83e\udd59 Kebab case toKebab() my-name-is-bond \ud83d\ude82 Train case toTrain() My-Name-Is-Bond \ud83c\udfe6 Cobol case toCobol() MY-NAME-IS-BOND \ud83d\udd21 Lower case toLower() my name is bond \ud83d\udd20 Upper case toUpper() MY NAME IS BOND \ud83d\udcf0 Title case toTitle() My Name Is Bond \u270d\ufe0f Sentence case toSentence() My name is bond Features: \ud83d\udd01 automatic case detection \ud83c\udf10 i18n Installation $ composer require jawira/case-converter Usage use Jawira\\CaseConverter\\Convert; $hero = new Convert('john-connor'); echo $hero- toCamel(); // output: johnConnor echo $hero- toSnake(); // output: john_connor Note: Input string (i.e. john-connor ) format is going to be detected automatically. Explicit case detection Method Description fromAuto() (default) Auto-detect naming convention fromCamel() Split input string using uppercase characters fromPascal() Split input string using uppercase characters fromSnake() Split input string using _ (underscore character) fromAda() Split input string using _ (underscore character) fromMacro() Split input string using _ (underscore character) fromKebab() Split input string using - (dash character) fromTrain() Split input string using - (dash character) fromCobol() Split input string using - (dash character) fromLower() Split input string using \u2423 (space character) fromUpper() Split input string using \u2423 (space character) fromTitle() Split input string using \u2423 (space character) fromSentence() Split input string using \u2423 (space character) Utility methods Method Description Output example toArray() Get array with detected words ['my', 'name', 'is', 'bond'] i18n Fully compatible with non-english alphabets: // Spanish $esp = new Convert('DON_RAM\u00d3N_Y_\u00d1O\u00d1O'); echo $esp- toCamel(); // output: donRam\u00f3nY\u00d1o\u00f1o // Greek $grc = new Convert('\u03c0\u03bf\u03bb\u03cd-\u039a\u03b1\u03bb\u03cc'); echo $grc- toCamel(); // output: \u03c0\u03bf\u03bb\u03cd\u039a\u03b1\u03bb\u03cc // Russian $rus = new Convert('\u041e\u0427\u0415\u041d\u042c_\u041f\u0420\u0418\u042f\u0422\u041d\u041e'); echo $rus- toCamel(); // output: \u043e\u0447\u0435\u043d\u044c\u041f\u0440\u0438\u044f\u0442\u043d\u043e Documentation https://jawira.github.io/case-converter/ License This library is licensed under the MIT LICENSE .","title":"Home"},{"location":"index.html#case-converter","text":"Use this library to convert string between: Name Method Output example \ud83d\udc2a Camel case toCamel() myNameIsBond \ud83d\udc68\u200d\ud83c\udfeb Pascal case toPascal() MyNameIsBond \ud83d\udc0d Snake case toSnake() my_name_is_bond \ud83d\udc69\u200d\ud83c\udfeb Ada case toAda() My_Name_Is_Bond \u24c2\ufe0f Macro case toMacro() MY_NAME_IS_BOND \ud83e\udd59 Kebab case toKebab() my-name-is-bond \ud83d\ude82 Train case toTrain() My-Name-Is-Bond \ud83c\udfe6 Cobol case toCobol() MY-NAME-IS-BOND \ud83d\udd21 Lower case toLower() my name is bond \ud83d\udd20 Upper case toUpper() MY NAME IS BOND \ud83d\udcf0 Title case toTitle() My Name Is Bond \u270d\ufe0f Sentence case toSentence() My name is bond Features: \ud83d\udd01 automatic case detection \ud83c\udf10 i18n","title":"Case converter"},{"location":"index.html#installation","text":"$ composer require jawira/case-converter","title":"Installation"},{"location":"index.html#usage","text":"use Jawira\\CaseConverter\\Convert; $hero = new Convert('john-connor'); echo $hero- toCamel(); // output: johnConnor echo $hero- toSnake(); // output: john_connor Note: Input string (i.e. john-connor ) format is going to be detected automatically.","title":"Usage"},{"location":"index.html#explicit-case-detection","text":"Method Description fromAuto() (default) Auto-detect naming convention fromCamel() Split input string using uppercase characters fromPascal() Split input string using uppercase characters fromSnake() Split input string using _ (underscore character) fromAda() Split input string using _ (underscore character) fromMacro() Split input string using _ (underscore character) fromKebab() Split input string using - (dash character) fromTrain() Split input string using - (dash character) fromCobol() Split input string using - (dash character) fromLower() Split input string using \u2423 (space character) fromUpper() Split input string using \u2423 (space character) fromTitle() Split input string using \u2423 (space character) fromSentence() Split input string using \u2423 (space character)","title":"Explicit case detection"},{"location":"index.html#utility-methods","text":"Method Description Output example toArray() Get array with detected words ['my', 'name', 'is', 'bond']","title":"Utility methods"},{"location":"index.html#i18n","text":"Fully compatible with non-english alphabets: // Spanish $esp = new Convert('DON_RAM\u00d3N_Y_\u00d1O\u00d1O'); echo $esp- toCamel(); // output: donRam\u00f3nY\u00d1o\u00f1o // Greek $grc = new Convert('\u03c0\u03bf\u03bb\u03cd-\u039a\u03b1\u03bb\u03cc'); echo $grc- toCamel(); // output: \u03c0\u03bf\u03bb\u03cd\u039a\u03b1\u03bb\u03cc // Russian $rus = new Convert('\u041e\u0427\u0415\u041d\u042c_\u041f\u0420\u0418\u042f\u0422\u041d\u041e'); echo $rus- toCamel(); // output: \u043e\u0447\u0435\u043d\u044c\u041f\u0440\u0438\u044f\u0442\u043d\u043e","title":"i18n"},{"location":"index.html#documentation","text":"https://jawira.github.io/case-converter/","title":"Documentation"},{"location":"index.html#license","text":"This library is licensed under the MIT LICENSE .","title":"License"},{"location":"contributing.html","text":"Contributing Contributions in the form of \u270dIssues and \ud83d\udee0Pull requests are welcomed and encouraged. How to contribute In order to contribute to this project: Fork this repository Create a new branch and commit your feature or bugfix Once you have finished, create a Pull Request to merge your changes into remote's develop branch Do not forget to add your name at the end of this file. Recommendations This project adheres to: Contributor Covenant : A Code of Conduct for Open Source Projects Keep a Changelog : Good practices for changelog file pds/skeleton : Standard PHP package skeleton Vincent Driessen's branching model : A branching model for Git Semantic Versioning : Simple rules for version numbers It's encouraged to use: The seven rules of a great Git commit message : How to Write a good Git Commit Message git-flow : Git extensions to provide high-level repository operations for Vincent Driessen's branching model Contributors The following individuals have contributed to this project: (add your name here)","title":"Contributing"},{"location":"contributing.html#contributing","text":"Contributions in the form of \u270dIssues and \ud83d\udee0Pull requests are welcomed and encouraged.","title":"Contributing"},{"location":"contributing.html#how-to-contribute","text":"In order to contribute to this project: Fork this repository Create a new branch and commit your feature or bugfix Once you have finished, create a Pull Request to merge your changes into remote's develop branch Do not forget to add your name at the end of this file.","title":"How to contribute"},{"location":"contributing.html#recommendations","text":"This project adheres to: Contributor Covenant : A Code of Conduct for Open Source Projects Keep a Changelog : Good practices for changelog file pds/skeleton : Standard PHP package skeleton Vincent Driessen's branching model : A branching model for Git Semantic Versioning : Simple rules for version numbers It's encouraged to use: The seven rules of a great Git commit message : How to Write a good Git Commit Message git-flow : Git extensions to provide high-level repository operations for Vincent Driessen's branching model","title":"Recommendations"},{"location":"contributing.html#contributors","text":"The following individuals have contributed to this project: (add your name here)","title":"Contributors"},{"location":"detection-algorithm.html","text":"Detection algorithm When \\Jawira\\CaseConverter\\Convert class is instantiated, the input string is analysed to detect the words in it. This is also the algorithm used by Convert::fromAuto method. If input string contains _ (underscore character), then _ is used to split string. If input string contains - (dash character), then - is used to split string. If input string contains \u2423 (space character), then \u2423 is used to split string. If input string contains uppercase characters only, then the input string is considered to be a single word. Finally, uppercase characters are used to split string.","title":"Detection algorithm"},{"location":"detection-algorithm.html#detection-algorithm","text":"When \\Jawira\\CaseConverter\\Convert class is instantiated, the input string is analysed to detect the words in it. This is also the algorithm used by Convert::fromAuto method. If input string contains _ (underscore character), then _ is used to split string. If input string contains - (dash character), then - is used to split string. If input string contains \u2423 (space character), then \u2423 is used to split string. If input string contains uppercase characters only, then the input string is considered to be a single word. Finally, uppercase characters are used to split string.","title":"Detection algorithm"},{"location":"dev.html","text":"Development Phing targets $ phing setup : Prepare project for development. $ phing qa : Run quality tests, use this before every commit. $ phing refresh : Update generated files (changelog, images, etc). Dev requirements To use Phing tasks you need to previously install: Phive mkdocs Using Phing behind a proxy If you are developing behind a proxy, you have to set the environment variable http_proxy . This variable is imported in buildfile. Conventions This project adheres to: git-flow Semantic Versioning Keep a changelog pds/skeleton","title":"Dev"},{"location":"dev.html#development","text":"","title":"Development"},{"location":"dev.html#phing-targets","text":"$ phing setup : Prepare project for development. $ phing qa : Run quality tests, use this before every commit. $ phing refresh : Update generated files (changelog, images, etc).","title":"Phing targets"},{"location":"dev.html#dev-requirements","text":"To use Phing tasks you need to previously install: Phive mkdocs","title":"Dev requirements"},{"location":"dev.html#using-phing-behind-a-proxy","text":"If you are developing behind a proxy, you have to set the environment variable http_proxy . This variable is imported in buildfile.","title":"Using Phing behind a proxy"},{"location":"dev.html#conventions","text":"This project adheres to: git-flow Semantic Versioning Keep a changelog pds/skeleton","title":"Conventions"},{"location":"examples.html","text":"Examples Basic usage Code: ?php declare(strict_types=1); require __DIR__ . '/vendor/autoload.php'; use Jawira\\CaseConverter\\Convert; $robot = new Convert('The-Terminator'); echo $robot- toPascal() . PHP_EOL; echo $robot- toCobol() . PHP_EOL; echo $robot- toSnake() . PHP_EOL; Output: TheTerminator THE-TERMINATOR the_terminator Explicit case detection Code: ?php declare(strict_types=1); require __DIR__ . '/vendor/autoload.php'; use Jawira\\CaseConverter\\Convert; $agency = new Convert('FBI'); echo $agency- fromAda() - toCobol() . PHP_EOL; // output: FBI echo $agency- toSnake() . PHP_EOL; // output: fbi echo $agency- fromCamel() - toCobol() . PHP_EOL; // output: F-B-I echo $agency- toSnake() . PHP_EOL; // output: f_b_i echo $agency- fromAuto() - toCobol() . PHP_EOL; // output: FBI echo $agency- toSnake() . PHP_EOL; // output: fbi Output: FBI fbi F-B-I f_b_i FBI fbi","title":"Examples"},{"location":"examples.html#examples","text":"","title":"Examples"},{"location":"examples.html#basic-usage","text":"Code: ?php declare(strict_types=1); require __DIR__ . '/vendor/autoload.php'; use Jawira\\CaseConverter\\Convert; $robot = new Convert('The-Terminator'); echo $robot- toPascal() . PHP_EOL; echo $robot- toCobol() . PHP_EOL; echo $robot- toSnake() . PHP_EOL; Output: TheTerminator THE-TERMINATOR the_terminator","title":"Basic usage"},{"location":"examples.html#explicit-case-detection","text":"Code: ?php declare(strict_types=1); require __DIR__ . '/vendor/autoload.php'; use Jawira\\CaseConverter\\Convert; $agency = new Convert('FBI'); echo $agency- fromAda() - toCobol() . PHP_EOL; // output: FBI echo $agency- toSnake() . PHP_EOL; // output: fbi echo $agency- fromCamel() - toCobol() . PHP_EOL; // output: F-B-I echo $agency- toSnake() . PHP_EOL; // output: f_b_i echo $agency- fromAuto() - toCobol() . PHP_EOL; // output: FBI echo $agency- toSnake() . PHP_EOL; // output: fbi Output: FBI fbi F-B-I f_b_i FBI fbi","title":"Explicit case detection"},{"location":"known-issues.html","text":"Known issues Number handling When using case-converter you cannot use a number as separator. In practice this means that a number is not considered as a word: As shown in the previous example, there is no way to go back to the original input string (i.e. hello-8-world ), in kebab case this sting is written as hello8-world . Full case-mapping PHP 7.3 introduced full case-mapping , in practice this means than you can have different results depending on your PHP version. $german = new Convert('Stra\u00dfe'); echo $german- toUpper(); // Produces STRA\u00dfE on PHP 7.2 // Produces STRASSE on PHP 7.3 Internally Case-Converter uses mb_convert_case() , this function uses the following constants: MB_CASE_LOWER MB_CASE_TITLE MB_CASE_UPPER The problem is that, Before PHP 7.3 , these constants perform simple case-mapping and after PHP 7.3 perform full case-mapping. If you want to maintain the old functionality after PHP 7.3 , then you have to use MB_CASE_LOWER_SIMPLE , MB_CASE_UPPER_SIMPLE , and MB_CASE_TITLE_SIMPLE . Of course these variables doesnt exist yet before PHP 7.3 . IMHO this is a breaking change , PHP people should have keep untouched old constants and create new ones for full case-mapping , for example: MB_CASE_LOWER_FULL , MB_CASE_TITLE_FULL , and MB_CASE_UPPER_FULL (please note these variables do not exist).","title":"Known issues"},{"location":"known-issues.html#known-issues","text":"","title":"Known issues"},{"location":"known-issues.html#number-handling","text":"When using case-converter you cannot use a number as separator. In practice this means that a number is not considered as a word: As shown in the previous example, there is no way to go back to the original input string (i.e. hello-8-world ), in kebab case this sting is written as hello8-world .","title":"Number handling"},{"location":"known-issues.html#full-case-mapping","text":"PHP 7.3 introduced full case-mapping , in practice this means than you can have different results depending on your PHP version. $german = new Convert('Stra\u00dfe'); echo $german- toUpper(); // Produces STRA\u00dfE on PHP 7.2 // Produces STRASSE on PHP 7.3 Internally Case-Converter uses mb_convert_case() , this function uses the following constants: MB_CASE_LOWER MB_CASE_TITLE MB_CASE_UPPER The problem is that, Before PHP 7.3 , these constants perform simple case-mapping and after PHP 7.3 perform full case-mapping. If you want to maintain the old functionality after PHP 7.3 , then you have to use MB_CASE_LOWER_SIMPLE , MB_CASE_UPPER_SIMPLE , and MB_CASE_TITLE_SIMPLE . Of course these variables doesnt exist yet before PHP 7.3 . IMHO this is a breaking change , PHP people should have keep untouched old constants and create new ones for full case-mapping , for example: MB_CASE_LOWER_FULL , MB_CASE_TITLE_FULL , and MB_CASE_UPPER_FULL (please note these variables do not exist).","title":"Full case-mapping"},{"location":"license.html","text":"The MIT License (MIT) Copyright \u00a9 2015 Jawira Portugal Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license.html#the-mit-license-mit","text":"Copyright \u00a9 2015 Jawira Portugal Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"}]}