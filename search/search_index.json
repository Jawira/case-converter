{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Case converter Use this library to convert string between: \ud83d\udc2a Camel case \ud83d\udc0d Snake case \ud83d\udc68\u200d\ud83c\udfeb Pascal case \ud83d\udc69\u200d\ud83c\udfeb Ada case \u24c2\ufe0f Macro case \ud83e\udd59 Kebab case \ud83d\ude86 Train case \ud83c\udfe6 Cobol case \ud83d\udd20 Upper case \ud83d\udd21 Lower case \ud83d\udcf0 Title case \u270d\ufe0f Sentence case Features: \ud83d\udd01 automatic case detection \ud83c\udf10 i18n Usage Instantiate Convert class with the string to transform: php $son = new Convert('john-connor'); Note: Input string (i.e. john-connor ) format is going to be detected automatically. Then use the right method to convert the string accordingly to your needs: php echo $son- toCamel(); // output: johnConnor echo $son- toSnake(); // output: john_connor Supported naming conventions Method Description Output example toCamel() Camel case myNameIsBond toPascal() Pascal case MyNameIsBond toKebab() Kebab case my-name-is-bond toTrain() Train case My-Name-Is-Bond toCobol() Cobol case MY-NAME-IS-BOND toSnake() Snake case my_name_is_bond toAda() Ada case My_Name_Is_Bond toMacro() Macro case MY_NAME_IS_BOND toUpper() Upper case MY NAME IS BOND toLower() Lower case my name is bond toTitle() Title case My Name Is Bond toSentence() Sentence case My name is bond Utility methods Method Description Output example toArray() Get array with detected words ['my', 'name', 'is', 'bond'] i18n Fully compatible with non-english alphabets: // Spanish $esp = new Convert('DON_RAM\u00d3N_Y_\u00d1O\u00d1O'); echo $esp- toCamel(); // output: donRam\u00f3nY\u00d1o\u00f1o // Greek $grc = new Convert('\u03c0\u03bf\u03bb\u03cd-\u039a\u03b1\u03bb\u03cc'); echo $grc- toCamel(); // output: \u03c0\u03bf\u03bb\u03cd\u039a\u03b1\u03bb\u03cc // Russian $rus = new Convert('\u041e\u0427\u0415\u041d\u042c_\u041f\u0420\u0418\u042f\u0422\u041d\u041e'); echo $rus- toCamel(); // output: \u043e\u0447\u0435\u043d\u044c\u041f\u0440\u0438\u044f\u0442\u043d\u043e Notes You must use UTF-8 encoding. Magic function __toString will always print string in Camel case format. Input strings are not supposed to have numbers in it. If you need to handle numbers then please open an issue . Installation Install using Composer: composer require jawira/case-converter Then import Convert class into your code: ?php use Jawira\\CaseConverter\\Convert; Full example ?php declare(strict_types=1); namespace Demo; require __DIR__ . '/vendor/autoload.php'; use Jawira\\CaseConverter\\Convert; $robot = new Convert('The-Terminator'); echo $robot- toPascal() . PHP_EOL; echo $robot- toCobol() . PHP_EOL; Output: TheTerminator THE-TERMINATOR Documentation https://jawira.github.io/case-converter/ License This library is licensed under the MIT LICENSE .","title":"Home"},{"location":"index.html#case-converter","text":"Use this library to convert string between: \ud83d\udc2a Camel case \ud83d\udc0d Snake case \ud83d\udc68\u200d\ud83c\udfeb Pascal case \ud83d\udc69\u200d\ud83c\udfeb Ada case \u24c2\ufe0f Macro case \ud83e\udd59 Kebab case \ud83d\ude86 Train case \ud83c\udfe6 Cobol case \ud83d\udd20 Upper case \ud83d\udd21 Lower case \ud83d\udcf0 Title case \u270d\ufe0f Sentence case Features: \ud83d\udd01 automatic case detection \ud83c\udf10 i18n","title":"Case converter"},{"location":"index.html#usage","text":"Instantiate Convert class with the string to transform: php $son = new Convert('john-connor'); Note: Input string (i.e. john-connor ) format is going to be detected automatically. Then use the right method to convert the string accordingly to your needs: php echo $son- toCamel(); // output: johnConnor echo $son- toSnake(); // output: john_connor","title":"Usage"},{"location":"index.html#supported-naming-conventions","text":"Method Description Output example toCamel() Camel case myNameIsBond toPascal() Pascal case MyNameIsBond toKebab() Kebab case my-name-is-bond toTrain() Train case My-Name-Is-Bond toCobol() Cobol case MY-NAME-IS-BOND toSnake() Snake case my_name_is_bond toAda() Ada case My_Name_Is_Bond toMacro() Macro case MY_NAME_IS_BOND toUpper() Upper case MY NAME IS BOND toLower() Lower case my name is bond toTitle() Title case My Name Is Bond toSentence() Sentence case My name is bond","title":"Supported naming conventions"},{"location":"index.html#utility-methods","text":"Method Description Output example toArray() Get array with detected words ['my', 'name', 'is', 'bond']","title":"Utility methods"},{"location":"index.html#i18n","text":"Fully compatible with non-english alphabets: // Spanish $esp = new Convert('DON_RAM\u00d3N_Y_\u00d1O\u00d1O'); echo $esp- toCamel(); // output: donRam\u00f3nY\u00d1o\u00f1o // Greek $grc = new Convert('\u03c0\u03bf\u03bb\u03cd-\u039a\u03b1\u03bb\u03cc'); echo $grc- toCamel(); // output: \u03c0\u03bf\u03bb\u03cd\u039a\u03b1\u03bb\u03cc // Russian $rus = new Convert('\u041e\u0427\u0415\u041d\u042c_\u041f\u0420\u0418\u042f\u0422\u041d\u041e'); echo $rus- toCamel(); // output: \u043e\u0447\u0435\u043d\u044c\u041f\u0440\u0438\u044f\u0442\u043d\u043e","title":"i18n"},{"location":"index.html#notes","text":"You must use UTF-8 encoding. Magic function __toString will always print string in Camel case format. Input strings are not supposed to have numbers in it. If you need to handle numbers then please open an issue .","title":"Notes"},{"location":"index.html#installation","text":"Install using Composer: composer require jawira/case-converter Then import Convert class into your code: ?php use Jawira\\CaseConverter\\Convert;","title":"Installation"},{"location":"index.html#full-example","text":"?php declare(strict_types=1); namespace Demo; require __DIR__ . '/vendor/autoload.php'; use Jawira\\CaseConverter\\Convert; $robot = new Convert('The-Terminator'); echo $robot- toPascal() . PHP_EOL; echo $robot- toCobol() . PHP_EOL; Output: TheTerminator THE-TERMINATOR","title":"Full example"},{"location":"index.html#documentation","text":"https://jawira.github.io/case-converter/","title":"Documentation"},{"location":"index.html#license","text":"This library is licensed under the MIT LICENSE .","title":"License"},{"location":"contributing.html","text":"Contributing Contributions in the form of \u270dIssues and \ud83d\udee0Pull requests are welcomed and encouraged. How to contribute In order to contribute to this project: Fork this repository Create a new branch and commit your feature or bugfix Once you have finished, create a Pull Request to merge your changes into remote's develop branch Do not forget to add your name at the end of this file. Recommendations This project adheres to: Contributor Covenant : A Code of Conduct for Open Source Projects Keep a Changelog : Good practices for changelog file pds/skeleton : Standard PHP package skeleton Vincent Driessen's branching model : A branching model for Git Semantic Versioning : Simple rules for version numbers It's encouraged to use: The seven rules of a great Git commit message : How to Write a good Git Commit Message git-flow : Git extensions to provide high-level repository operations for Vincent Driessen's branching model Contributors The following individuals have contributed to this project: (add your name here)","title":"Contributing"},{"location":"contributing.html#contributing","text":"Contributions in the form of \u270dIssues and \ud83d\udee0Pull requests are welcomed and encouraged.","title":"Contributing"},{"location":"contributing.html#how-to-contribute","text":"In order to contribute to this project: Fork this repository Create a new branch and commit your feature or bugfix Once you have finished, create a Pull Request to merge your changes into remote's develop branch Do not forget to add your name at the end of this file.","title":"How to contribute"},{"location":"contributing.html#recommendations","text":"This project adheres to: Contributor Covenant : A Code of Conduct for Open Source Projects Keep a Changelog : Good practices for changelog file pds/skeleton : Standard PHP package skeleton Vincent Driessen's branching model : A branching model for Git Semantic Versioning : Simple rules for version numbers It's encouraged to use: The seven rules of a great Git commit message : How to Write a good Git Commit Message git-flow : Git extensions to provide high-level repository operations for Vincent Driessen's branching model","title":"Recommendations"},{"location":"contributing.html#contributors","text":"The following individuals have contributed to this project: (add your name here)","title":"Contributors"},{"location":"detection-algorithm.html","text":"Detection algorithm","title":"Detection algorithm"},{"location":"detection-algorithm.html#detection-algorithm","text":"","title":"Detection algorithm"},{"location":"dev.html","text":"Development Phing targets $ phing setup : Prepare project for development. $ phing qa : Run quality tests, use this before every commit. $ phing refresh : Update generated files (changelog, images, etc). Using proxy behind a Phing If you are developing behind a proxy, you have to set the environment variable http_proxy . This variable is imported in buildfile. Conventions This project adheres to: git-flow Semantic Versioning Keep a changelog pds/skeleton","title":"Dev"},{"location":"dev.html#development","text":"","title":"Development"},{"location":"dev.html#phing-targets","text":"$ phing setup : Prepare project for development. $ phing qa : Run quality tests, use this before every commit. $ phing refresh : Update generated files (changelog, images, etc).","title":"Phing targets"},{"location":"dev.html#using-proxy-behind-a-phing","text":"If you are developing behind a proxy, you have to set the environment variable http_proxy . This variable is imported in buildfile.","title":"Using proxy behind a Phing"},{"location":"dev.html#conventions","text":"This project adheres to: git-flow Semantic Versioning Keep a changelog pds/skeleton","title":"Conventions"},{"location":"known-issues.html","text":"Known issues Number handling When using case-converter you cannot use a number as separator. In practice this means that a number is not considered as a word: As shown in the previous example, there is no way to go back to the original input string (i.e. hello-8-world ), in kebab case this sting is written as hello8-world .","title":"Known issues"},{"location":"known-issues.html#known-issues","text":"","title":"Known issues"},{"location":"known-issues.html#number-handling","text":"When using case-converter you cannot use a number as separator. In practice this means that a number is not considered as a word: As shown in the previous example, there is no way to go back to the original input string (i.e. hello-8-world ), in kebab case this sting is written as hello8-world .","title":"Number handling"},{"location":"license.html","text":"The MIT License (MIT) Copyright (c) 2015 Jawira Portugal Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license.html#the-mit-license-mit","text":"Copyright (c) 2015 Jawira Portugal Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"}]}