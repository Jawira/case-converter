{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Case converter Use this library to convert string between: Name Method Output example \ud83d\udc2a Camel case toCamel() myNameIsBond \ud83d\udc68\u200d\ud83c\udfeb Pascal case toPascal() MyNameIsBond \ud83d\udc0d Snake case toSnake() my_name_is_bond \ud83d\udc69\u200d\ud83c\udfeb Ada case toAda() My_Name_Is_Bond \u24c2\ufe0f Macro case toMacro() MY_NAME_IS_BOND \ud83e\udd59 Kebab case toKebab() my-name-is-bond \ud83d\ude82 Train case toTrain() My-Name-Is-Bond \ud83c\udfe6 Cobol case toCobol() MY-NAME-IS-BOND \ud83d\udd21 Lower case toLower() my name is bond \ud83d\udd20 Upper case toUpper() MY NAME IS BOND \ud83d\udcf0 Title case toTitle() My Name Is Bond \u270d\ufe0f Sentence case toSentence() My name is bond \u2699\ufe0f Dot notation toDot() my.name.is.bond Features: \ud83d\udd01 automatic case detection \ud83c\udfed factory \ud83c\udf10 i18n Usage Input string (i.e. john-connor ) format is going to be detected automatically . Here's an example: use Jawira\\CaseConverter\\Convert; $hero = new Convert( john-connor ); echo $hero- toCamel(); // output: johnConnor Of course you can explicitly set the format of input string: echo $hero- fromKebab()- toSnake(); // output: john_connor You can also use the provided factory to instantiate Convert class. A list of all public methods is also available. i18n Fully compatible with non-english alphabets: // Spanish $esp = new Convert( DON_RAM\u00d3N_Y_\u00d1O\u00d1O ); echo $esp- toCamel(); // output: donRam\u00f3nY\u00d1o\u00f1o // Greek $grc = new Convert( \u03c0\u03bf\u03bb\u03cd-\u039a\u03b1\u03bb\u03cc ); echo $grc- toCamel(); // output: \u03c0\u03bf\u03bb\u03cd\u039a\u03b1\u03bb\u03cc // Russian $rus = new Convert( \u041e\u0427\u0415\u041d\u042c_\u041f\u0420\u0418\u042f\u0422\u041d\u041e ); echo $rus- toCamel(); // output: \u043e\u0447\u0435\u043d\u044c\u041f\u0440\u0438\u044f\u0442\u043d\u043e case-converter is compatible with Simple Case-Mapping and Full Case-Mapping . Learn more about Case-Mapping . Installation $ composer require jawira/case-converter Documentation https://jawira.github.io/case-converter/ Contributing If you liked this project, \u2b50 star it on GitHub . License This library is licensed under the MIT LICENSE . Packages from jawira jawira/emoji-catalog (library) Get access to +3000 emojis as class constants. jawira/phing-visualizer (library) Graphical representation of Phing's buildfile. jawira/phing-open-task (library) Phing task to open files, directories, and URLs with your favorite software. more...","title":"Home"},{"location":"index.html#case-converter","text":"Use this library to convert string between: Name Method Output example \ud83d\udc2a Camel case toCamel() myNameIsBond \ud83d\udc68\u200d\ud83c\udfeb Pascal case toPascal() MyNameIsBond \ud83d\udc0d Snake case toSnake() my_name_is_bond \ud83d\udc69\u200d\ud83c\udfeb Ada case toAda() My_Name_Is_Bond \u24c2\ufe0f Macro case toMacro() MY_NAME_IS_BOND \ud83e\udd59 Kebab case toKebab() my-name-is-bond \ud83d\ude82 Train case toTrain() My-Name-Is-Bond \ud83c\udfe6 Cobol case toCobol() MY-NAME-IS-BOND \ud83d\udd21 Lower case toLower() my name is bond \ud83d\udd20 Upper case toUpper() MY NAME IS BOND \ud83d\udcf0 Title case toTitle() My Name Is Bond \u270d\ufe0f Sentence case toSentence() My name is bond \u2699\ufe0f Dot notation toDot() my.name.is.bond Features: \ud83d\udd01 automatic case detection \ud83c\udfed factory \ud83c\udf10 i18n","title":"Case converter"},{"location":"index.html#usage","text":"Input string (i.e. john-connor ) format is going to be detected automatically . Here's an example: use Jawira\\CaseConverter\\Convert; $hero = new Convert( john-connor ); echo $hero- toCamel(); // output: johnConnor Of course you can explicitly set the format of input string: echo $hero- fromKebab()- toSnake(); // output: john_connor You can also use the provided factory to instantiate Convert class. A list of all public methods is also available.","title":"Usage"},{"location":"index.html#i18n","text":"Fully compatible with non-english alphabets: // Spanish $esp = new Convert( DON_RAM\u00d3N_Y_\u00d1O\u00d1O ); echo $esp- toCamel(); // output: donRam\u00f3nY\u00d1o\u00f1o // Greek $grc = new Convert( \u03c0\u03bf\u03bb\u03cd-\u039a\u03b1\u03bb\u03cc ); echo $grc- toCamel(); // output: \u03c0\u03bf\u03bb\u03cd\u039a\u03b1\u03bb\u03cc // Russian $rus = new Convert( \u041e\u0427\u0415\u041d\u042c_\u041f\u0420\u0418\u042f\u0422\u041d\u041e ); echo $rus- toCamel(); // output: \u043e\u0447\u0435\u043d\u044c\u041f\u0440\u0438\u044f\u0442\u043d\u043e case-converter is compatible with Simple Case-Mapping and Full Case-Mapping . Learn more about Case-Mapping .","title":"i18n"},{"location":"index.html#installation","text":"$ composer require jawira/case-converter","title":"Installation"},{"location":"index.html#documentation","text":"https://jawira.github.io/case-converter/","title":"Documentation"},{"location":"index.html#contributing","text":"If you liked this project, \u2b50 star it on GitHub .","title":"Contributing"},{"location":"index.html#license","text":"This library is licensed under the MIT LICENSE .","title":"License"},{"location":"index.html#packages-from-jawira","text":"jawira/emoji-catalog (library) Get access to +3000 emojis as class constants. jawira/phing-visualizer (library) Graphical representation of Phing's buildfile. jawira/phing-open-task (library) Phing task to open files, directories, and URLs with your favorite software. more...","title":"Packages from jawira"},{"location":"api.html","text":"API List of public methods. \\Jawira\\CaseConverter\\Convert String conversion Method Description toCamel() Return string in Camel case format toPascal() Return string in Pascal case format toSnake() Return string in Snake case format toAda() Return string in Ada case format toMacro() Return string in Macro case format toKebab() Return string in Kebab case format toTrain() Return string in Train case format toCobol() Return string in Cobol case format toLower() Return string in Lower case format toUpper() Return string in Upper case format toTitle() Return string in Title case format toSentence() Return string in Sentence case format toDot() Return string in Dot notation Explicit case detection Method Description fromAuto() (default) Auto-detect naming convention fromCamel() Split input string using uppercase characters fromPascal() Split input string using uppercase characters fromSnake() Split input string using _ (underscore character) fromAda() Split input string using _ (underscore character) fromMacro() Split input string using _ (underscore character) fromKebab() Split input string using - (dash character) fromTrain() Split input string using - (dash character) fromCobol() Split input string using - (dash character) fromLower() Split input string using \u2423 (space character) fromUpper() Split input string using \u2423 (space character) fromTitle() Split input string using \u2423 (space character) fromSentence() Split input string using \u2423 (space character) fromDot() Split input string using . (dot character) Please note that some methods are equivalent and have the same effect: fromDot() fromCamel() \u2248 fromPascal() fromSnake() \u2248 fromAda() \u2248 fromMacro() fromKebab() \u2248 fromTrain() \u2248 fromCobol() fromLower() \u2248 fromUpper() \u2248 fromTitle() \u2248 fromSentence() All these methods exists only for sake of completeness. Utility methods Method Description getSource() Returns original input string toArray() Returns array with detected words forceSimpleCaseMapping() Output sting uses Simple Case-Mapping even if you are using PHP 7.3 or newer \\Jawira\\CaseConverter\\CaseConverter Factory method Method Description convert() Creates a Convert object","title":"Api"},{"location":"api.html#api","text":"List of public methods.","title":"API"},{"location":"api.html#jawiracaseconverterconvert","text":"","title":"\\Jawira\\CaseConverter\\Convert"},{"location":"api.html#string-conversion","text":"Method Description toCamel() Return string in Camel case format toPascal() Return string in Pascal case format toSnake() Return string in Snake case format toAda() Return string in Ada case format toMacro() Return string in Macro case format toKebab() Return string in Kebab case format toTrain() Return string in Train case format toCobol() Return string in Cobol case format toLower() Return string in Lower case format toUpper() Return string in Upper case format toTitle() Return string in Title case format toSentence() Return string in Sentence case format toDot() Return string in Dot notation","title":"String conversion"},{"location":"api.html#explicit-case-detection","text":"Method Description fromAuto() (default) Auto-detect naming convention fromCamel() Split input string using uppercase characters fromPascal() Split input string using uppercase characters fromSnake() Split input string using _ (underscore character) fromAda() Split input string using _ (underscore character) fromMacro() Split input string using _ (underscore character) fromKebab() Split input string using - (dash character) fromTrain() Split input string using - (dash character) fromCobol() Split input string using - (dash character) fromLower() Split input string using \u2423 (space character) fromUpper() Split input string using \u2423 (space character) fromTitle() Split input string using \u2423 (space character) fromSentence() Split input string using \u2423 (space character) fromDot() Split input string using . (dot character) Please note that some methods are equivalent and have the same effect: fromDot() fromCamel() \u2248 fromPascal() fromSnake() \u2248 fromAda() \u2248 fromMacro() fromKebab() \u2248 fromTrain() \u2248 fromCobol() fromLower() \u2248 fromUpper() \u2248 fromTitle() \u2248 fromSentence() All these methods exists only for sake of completeness.","title":"Explicit case detection"},{"location":"api.html#utility-methods","text":"Method Description getSource() Returns original input string toArray() Returns array with detected words forceSimpleCaseMapping() Output sting uses Simple Case-Mapping even if you are using PHP 7.3 or newer","title":"Utility methods"},{"location":"api.html#jawiracaseconvertercaseconverter","text":"","title":"\\Jawira\\CaseConverter\\CaseConverter"},{"location":"api.html#factory-method","text":"Method Description convert() Creates a Convert object","title":"Factory method"},{"location":"case-mapping.html","text":"Case-Mapping Introduction Case mapping or case conversion is a process whereby strings are converted to a particular form\u2014uppercase, lowercase, or titlecase\u2014possibly for display to the user. PHP always performed Simple Case-Mapping , this is map one-to-one character mapping. For example, one lower case character is converter to one upper case character. PHP 7.3 introduced Full Case-Mapping , you can have one-to-many character mapping. In practice this means than you can have different results depending on your PHP version. $german = new Convert( Stra\u00dfe ); echo $german- toUpper(); // Produces STRA\u00dfE on PHP 7.2 // Produces STRASSE on PHP 7.3 Please note that Full Case-Mapping is locale dependent: // Turkish (requires appropriate locale) $tur = new Convert( istambul ); echo $tur- toTrain(); // output: \u0130stanbul Forcing Simple Case-Mapping As told before, Full Case-Mapping is only available on PHP 7.3 and newer. The following code snippet is executed on PHP 7.3: // German $ger = new Convert( Stra\u00dfe ); echo $ger- toUpper(); // output: STRASSE To force Simple Case-Mapping you have to call - forceSimpleCaseMapping() : // German $ger = new Convert( Stra\u00dfe ); $ger- forceSimpleCaseMapping(); echo $ger- toUpper(); // output: STRA\u00dfE Please note - forceSimpleCaseMapping() has no effect on PHP 7.1 and PHP 7.2 as these version can only perform Simple Case-Mapping . Technical details Internally Case-Converter uses mb_convert_case() , this function uses the following constants: MB_CASE_LOWER MB_CASE_TITLE MB_CASE_UPPER The problem is that, Before PHP 7.3 , these constants perform simple case-mapping and after PHP 7.3 perform full case-mapping. If you want to maintain the old functionality after PHP 7.3 you have to call - forceSimpleCaseMapping() : // German $ger = new Convert( Stra\u00dfe ); $ger- forceSimpleCaseMapping(); echo $ger- toUpper(); // output: STRASSE IMHO this is a breaking change , PHP people should have keep untouched old constants and create new ones for Full Case-Mapping , for example: MB_CASE_LOWER_FULL , MB_CASE_TITLE_FULL , and MB_CASE_UPPER_FULL (please note these variables do not exist).","title":"Case mapping"},{"location":"case-mapping.html#case-mapping","text":"","title":"Case-Mapping"},{"location":"case-mapping.html#introduction","text":"Case mapping or case conversion is a process whereby strings are converted to a particular form\u2014uppercase, lowercase, or titlecase\u2014possibly for display to the user. PHP always performed Simple Case-Mapping , this is map one-to-one character mapping. For example, one lower case character is converter to one upper case character. PHP 7.3 introduced Full Case-Mapping , you can have one-to-many character mapping. In practice this means than you can have different results depending on your PHP version. $german = new Convert( Stra\u00dfe ); echo $german- toUpper(); // Produces STRA\u00dfE on PHP 7.2 // Produces STRASSE on PHP 7.3 Please note that Full Case-Mapping is locale dependent: // Turkish (requires appropriate locale) $tur = new Convert( istambul ); echo $tur- toTrain(); // output: \u0130stanbul","title":"Introduction"},{"location":"case-mapping.html#forcing-simple-case-mapping","text":"As told before, Full Case-Mapping is only available on PHP 7.3 and newer. The following code snippet is executed on PHP 7.3: // German $ger = new Convert( Stra\u00dfe ); echo $ger- toUpper(); // output: STRASSE To force Simple Case-Mapping you have to call - forceSimpleCaseMapping() : // German $ger = new Convert( Stra\u00dfe ); $ger- forceSimpleCaseMapping(); echo $ger- toUpper(); // output: STRA\u00dfE Please note - forceSimpleCaseMapping() has no effect on PHP 7.1 and PHP 7.2 as these version can only perform Simple Case-Mapping .","title":"Forcing Simple Case-Mapping"},{"location":"case-mapping.html#technical-details","text":"Internally Case-Converter uses mb_convert_case() , this function uses the following constants: MB_CASE_LOWER MB_CASE_TITLE MB_CASE_UPPER The problem is that, Before PHP 7.3 , these constants perform simple case-mapping and after PHP 7.3 perform full case-mapping. If you want to maintain the old functionality after PHP 7.3 you have to call - forceSimpleCaseMapping() : // German $ger = new Convert( Stra\u00dfe ); $ger- forceSimpleCaseMapping(); echo $ger- toUpper(); // output: STRASSE IMHO this is a breaking change , PHP people should have keep untouched old constants and create new ones for Full Case-Mapping , for example: MB_CASE_LOWER_FULL , MB_CASE_TITLE_FULL , and MB_CASE_UPPER_FULL (please note these variables do not exist).","title":"Technical details"},{"location":"changelog.html","text":"Changelog All notable changes to this project will be documented in this file. Unreleased Changed v3.4.0 - 2019-10-21 Added #52 Adding badges to readme. Changed #45 Changed hack from UppercaseSplitter to proper solution. #51 Refactoring \\Jawira\\CaseConverter\\Convert::analyse #50 Improving PHPUnit coverage Fixed #49 Bug fix: string wrongly recognized when starts with a delimiter. v3.3.3 - 2019-09-03 Fixed Fix anchor in readme v3.3.2 - 2019-09-03 Changed Updating documentation v3.3.1 - 2019-08-21 Fixed Removed unwanted dependency v3.3.0 - 2019-08-21 Added #46 Added new convention: Dot notation v3.2.1 - 2019-08-17 Changed Updated Readme file v3.2.0 - 2019-08-17 Added #40 Added Factory class and its interface. v3.1.0 - 2019-07-25 Added #41 Added \\Jawira\\CaseConverter\\Convert::getSource method to retrieve original input string. #38 Added \\Jawira\\CaseConverter\\Convert::forceSimpleCaseMapping to force the usage of Single Case-Mapping in PHP 7.3 and newer. This method has no effect in PHP 7.1 nor PHP 7.2 . Fixed #44 Strings with 0 in it can be handled correctly. v3.0.0 - 2019-06-30 Added #36 Static site with documentation https://jawira.github.io/case-converter/build.png #30 Added functions to explicitly set the naming conventions of input string: fromAuto() , fromCamel() , fromPascal() , fromSnake() , fromAda() , fromMacro() , fromKebab() , fromTrain() , fromCobol() , fromLower() , fromUpper() , fromTitle() , and fromSentence() . Removed #37 Removed deprecated functions: Convert::__toString() and Convert::count() v2.3.0 - 2019-06-15 Changed #35 Big refactoring in library's structure, user should not notice this changes Deprecated #35 \\Jawira\\CaseConverter\\Convert::__toString #35 \\Jawira\\CaseConverter\\Convert::count Removed #35 Lot of constants have been removed from Convert class: ENCODING, DASH, EMPTY_STRING, SPACE, UNDERSCORE, STRATEGY_DASH, STRATEGY_SPACE, STRATEGY_UNDERSCORE, STRATEGY_UPPERCASE, ADA, CAMEL, COBOL, KEBAB, LOWER, MACRO, PASCAL, SENTENCE, SNAKE, TITLE, TRAIN, UPPER. v2.2.0 - 2019-05-30 Added #33 Added support for space based naming conventions: Title case, Sentence case, Upper case, and Lower case. v2.1.0 - 2019-05-10 Added #26 New method to get array with words extracted from original string \\Jawira\\CaseConverter\\Convert::toArray PHPLoc target in buildfile #31 Implement countable interface v2.0.4 - 2019-04-04 Changed #24 Improving PHPUnit tests #29 Adding PHPPackages badges v2.0.3 - 2019-03-30 Added #22 Code Climate integration v2.0.2 - 2019-03-29 Changed #24 Re-writing PHPUnit tests Added #27 Travis-ci integration v2.0.1 - 2019-03-28 Changed #25 Updated readme file v2.0.0 - 2019-03-26 Changed #21 New methods to convert strings between: Snake case, Camel case, Kebab case, Pascal case, Ada case, Train case, Cobol case and Macro case #21 Behat tests have been adapted for new CaseConverter signatures v1.2.0 - 2019-03-18 Added #19 Handling Kebab case #18 Armenian behat tests #18 Swedish behat tests v1.1.7 - 2019-02-18 Added Waffle.io badge in README.md #16 Use Phive to download Phar files #11 Created CaseConverterException Fixed #17 Fixing PHPStan error v1.1.6 - 2018-12-15 Fixed Phing uses http_proxy behind a proxy to download Behat, PHPUnit and Composer. v1.1.5 - 2018-10-18 Added New Phing target for Behat tests Changed Moved PHPUnit and Behat files to tests dir Renaming some Phing targets Removed Behat was removed from composer.json , instead, bin/behat is used. v1.1.4 - 2018-10-06 Fixed Fixed support for multilingual strings: spanish, greek, cyrillic, etc. v1.1.3 - 2018-10-04 Added Added pds/skeleton badge in README.md Added pds/skeleton as suggestion in composer.json Added behat tests #9 Fixed Fixed bug with invalid Pascal Case #12 v1.1.2 - 2018-09-23 Added Crated Phing visualisation build.png Fixed Un-versioning composer.lock v1.1.1 - 2018-09-23 Fixed Un-versioning composer.lock v1.1.0 - 2018-01-29 Added Build tools (Makefile Phing) Fixed Bug with spanish characters ( issue #6 ) v1.0.1 - 2017-11-10 Added Unitary tests Unitary tests for spanish characters Fixed Bug with acronyms ( issue #5 ) v1.0.0 - 2017-10-27 Changed Slight changes on README.md Removed PHPUnit and pds/skeleton dependencies [v0.0.0] - 2017-10-26 Added Composer support Changed Directory structure has been modified to adapt it to Packagist Removed Deleted Convert::old_camelToSnake() Deleted Convert::old_snakeToCamel()","title":"Changelog"},{"location":"changelog.html#changelog","text":"All notable changes to this project will be documented in this file.","title":"Changelog"},{"location":"changelog.html#unreleased","text":"","title":"Unreleased"},{"location":"changelog.html#changed","text":"","title":"Changed"},{"location":"changelog.html#v340-2019-10-21","text":"","title":"v3.4.0 - 2019-10-21"},{"location":"changelog.html#added","text":"#52 Adding badges to readme.","title":"Added"},{"location":"changelog.html#changed_1","text":"#45 Changed hack from UppercaseSplitter to proper solution. #51 Refactoring \\Jawira\\CaseConverter\\Convert::analyse #50 Improving PHPUnit coverage","title":"Changed"},{"location":"changelog.html#fixed","text":"#49 Bug fix: string wrongly recognized when starts with a delimiter.","title":"Fixed"},{"location":"changelog.html#v333-2019-09-03","text":"","title":"v3.3.3 - 2019-09-03"},{"location":"changelog.html#fixed_1","text":"Fix anchor in readme","title":"Fixed"},{"location":"changelog.html#v332-2019-09-03","text":"","title":"v3.3.2 - 2019-09-03"},{"location":"changelog.html#changed_2","text":"Updating documentation","title":"Changed"},{"location":"changelog.html#v331-2019-08-21","text":"","title":"v3.3.1 - 2019-08-21"},{"location":"changelog.html#fixed_2","text":"Removed unwanted dependency","title":"Fixed"},{"location":"changelog.html#v330-2019-08-21","text":"","title":"v3.3.0 - 2019-08-21"},{"location":"changelog.html#added_1","text":"#46 Added new convention: Dot notation","title":"Added"},{"location":"changelog.html#v321-2019-08-17","text":"","title":"v3.2.1 - 2019-08-17"},{"location":"changelog.html#changed_3","text":"Updated Readme file","title":"Changed"},{"location":"changelog.html#v320-2019-08-17","text":"","title":"v3.2.0 - 2019-08-17"},{"location":"changelog.html#added_2","text":"#40 Added Factory class and its interface.","title":"Added"},{"location":"changelog.html#v310-2019-07-25","text":"","title":"v3.1.0 - 2019-07-25"},{"location":"changelog.html#added_3","text":"#41 Added \\Jawira\\CaseConverter\\Convert::getSource method to retrieve original input string. #38 Added \\Jawira\\CaseConverter\\Convert::forceSimpleCaseMapping to force the usage of Single Case-Mapping in PHP 7.3 and newer. This method has no effect in PHP 7.1 nor PHP 7.2 .","title":"Added"},{"location":"changelog.html#fixed_3","text":"#44 Strings with 0 in it can be handled correctly.","title":"Fixed"},{"location":"changelog.html#v300-2019-06-30","text":"","title":"v3.0.0 - 2019-06-30"},{"location":"changelog.html#added_4","text":"#36 Static site with documentation https://jawira.github.io/case-converter/build.png #30 Added functions to explicitly set the naming conventions of input string: fromAuto() , fromCamel() , fromPascal() , fromSnake() , fromAda() , fromMacro() , fromKebab() , fromTrain() , fromCobol() , fromLower() , fromUpper() , fromTitle() , and fromSentence() .","title":"Added"},{"location":"changelog.html#removed","text":"#37 Removed deprecated functions: Convert::__toString() and Convert::count()","title":"Removed"},{"location":"changelog.html#v230-2019-06-15","text":"","title":"v2.3.0 - 2019-06-15"},{"location":"changelog.html#changed_4","text":"#35 Big refactoring in library's structure, user should not notice this changes","title":"Changed"},{"location":"changelog.html#deprecated","text":"#35 \\Jawira\\CaseConverter\\Convert::__toString #35 \\Jawira\\CaseConverter\\Convert::count","title":"Deprecated"},{"location":"changelog.html#removed_1","text":"#35 Lot of constants have been removed from Convert class: ENCODING, DASH, EMPTY_STRING, SPACE, UNDERSCORE, STRATEGY_DASH, STRATEGY_SPACE, STRATEGY_UNDERSCORE, STRATEGY_UPPERCASE, ADA, CAMEL, COBOL, KEBAB, LOWER, MACRO, PASCAL, SENTENCE, SNAKE, TITLE, TRAIN, UPPER.","title":"Removed"},{"location":"changelog.html#v220-2019-05-30","text":"","title":"v2.2.0 - 2019-05-30"},{"location":"changelog.html#added_5","text":"#33 Added support for space based naming conventions: Title case, Sentence case, Upper case, and Lower case.","title":"Added"},{"location":"changelog.html#v210-2019-05-10","text":"","title":"v2.1.0 - 2019-05-10"},{"location":"changelog.html#added_6","text":"#26 New method to get array with words extracted from original string \\Jawira\\CaseConverter\\Convert::toArray PHPLoc target in buildfile #31 Implement countable interface","title":"Added"},{"location":"changelog.html#v204-2019-04-04","text":"","title":"v2.0.4 - 2019-04-04"},{"location":"changelog.html#changed_5","text":"#24 Improving PHPUnit tests #29 Adding PHPPackages badges","title":"Changed"},{"location":"changelog.html#v203-2019-03-30","text":"","title":"v2.0.3 - 2019-03-30"},{"location":"changelog.html#added_7","text":"#22 Code Climate integration","title":"Added"},{"location":"changelog.html#v202-2019-03-29","text":"","title":"v2.0.2 - 2019-03-29"},{"location":"changelog.html#changed_6","text":"#24 Re-writing PHPUnit tests","title":"Changed"},{"location":"changelog.html#added_8","text":"#27 Travis-ci integration","title":"Added"},{"location":"changelog.html#v201-2019-03-28","text":"","title":"v2.0.1 - 2019-03-28"},{"location":"changelog.html#changed_7","text":"#25 Updated readme file","title":"Changed"},{"location":"changelog.html#v200-2019-03-26","text":"","title":"v2.0.0 - 2019-03-26"},{"location":"changelog.html#changed_8","text":"#21 New methods to convert strings between: Snake case, Camel case, Kebab case, Pascal case, Ada case, Train case, Cobol case and Macro case #21 Behat tests have been adapted for new CaseConverter signatures","title":"Changed"},{"location":"changelog.html#v120-2019-03-18","text":"","title":"v1.2.0 - 2019-03-18"},{"location":"changelog.html#added_9","text":"#19 Handling Kebab case #18 Armenian behat tests #18 Swedish behat tests","title":"Added"},{"location":"changelog.html#v117-2019-02-18","text":"","title":"v1.1.7 - 2019-02-18"},{"location":"changelog.html#added_10","text":"Waffle.io badge in README.md #16 Use Phive to download Phar files #11 Created CaseConverterException","title":"Added"},{"location":"changelog.html#fixed_4","text":"#17 Fixing PHPStan error","title":"Fixed"},{"location":"changelog.html#v116-2018-12-15","text":"","title":"v1.1.6 - 2018-12-15"},{"location":"changelog.html#fixed_5","text":"Phing uses http_proxy behind a proxy to download Behat, PHPUnit and Composer.","title":"Fixed"},{"location":"changelog.html#v115-2018-10-18","text":"","title":"v1.1.5 - 2018-10-18"},{"location":"changelog.html#added_11","text":"New Phing target for Behat tests","title":"Added"},{"location":"changelog.html#changed_9","text":"Moved PHPUnit and Behat files to tests dir Renaming some Phing targets","title":"Changed"},{"location":"changelog.html#removed_2","text":"Behat was removed from composer.json , instead, bin/behat is used.","title":"Removed"},{"location":"changelog.html#v114-2018-10-06","text":"","title":"v1.1.4 - 2018-10-06"},{"location":"changelog.html#fixed_6","text":"Fixed support for multilingual strings: spanish, greek, cyrillic, etc.","title":"Fixed"},{"location":"changelog.html#v113-2018-10-04","text":"","title":"v1.1.3 - 2018-10-04"},{"location":"changelog.html#added_12","text":"Added pds/skeleton badge in README.md Added pds/skeleton as suggestion in composer.json Added behat tests #9","title":"Added"},{"location":"changelog.html#fixed_7","text":"Fixed bug with invalid Pascal Case #12","title":"Fixed"},{"location":"changelog.html#v112-2018-09-23","text":"","title":"v1.1.2 - 2018-09-23"},{"location":"changelog.html#added_13","text":"Crated Phing visualisation build.png","title":"Added"},{"location":"changelog.html#fixed_8","text":"Un-versioning composer.lock","title":"Fixed"},{"location":"changelog.html#v111-2018-09-23","text":"","title":"v1.1.1 - 2018-09-23"},{"location":"changelog.html#fixed_9","text":"Un-versioning composer.lock","title":"Fixed"},{"location":"changelog.html#v110-2018-01-29","text":"","title":"v1.1.0 - 2018-01-29"},{"location":"changelog.html#added_14","text":"Build tools (Makefile Phing)","title":"Added"},{"location":"changelog.html#fixed_10","text":"Bug with spanish characters ( issue #6 )","title":"Fixed"},{"location":"changelog.html#v101-2017-11-10","text":"","title":"v1.0.1 - 2017-11-10"},{"location":"changelog.html#added_15","text":"Unitary tests Unitary tests for spanish characters","title":"Added"},{"location":"changelog.html#fixed_11","text":"Bug with acronyms ( issue #5 )","title":"Fixed"},{"location":"changelog.html#v100-2017-10-27","text":"","title":"v1.0.0 - 2017-10-27"},{"location":"changelog.html#changed_10","text":"Slight changes on README.md","title":"Changed"},{"location":"changelog.html#removed_3","text":"PHPUnit and pds/skeleton dependencies","title":"Removed"},{"location":"changelog.html#v000-2017-10-26","text":"","title":"[v0.0.0] - 2017-10-26"},{"location":"changelog.html#added_16","text":"Composer support","title":"Added"},{"location":"changelog.html#changed_11","text":"Directory structure has been modified to adapt it to Packagist","title":"Changed"},{"location":"changelog.html#removed_4","text":"Deleted Convert::old_camelToSnake() Deleted Convert::old_snakeToCamel()","title":"Removed"},{"location":"contributing.html","text":"Contributing Contributions in the form of \u270dIssues and \ud83d\udee0Pull requests are welcomed and encouraged. How to contribute In order to contribute to this project: Fork this repository Create a new branch and commit your feature or bugfix Once you have finished, create a Pull Request to merge your changes into remote's develop branch Do not forget to add your name at the end of this file. Recommendations This project adheres to: Contributor Covenant : A Code of Conduct for Open Source Projects Keep a Changelog : Good practices for changelog file pds/skeleton : Standard PHP package skeleton Vincent Driessen's branching model : A branching model for Git Semantic Versioning : Simple rules for version numbers It's encouraged to use: The seven rules of a great Git commit message : How to Write a good Git Commit Message git-flow : Git extensions to provide high-level repository operations for Vincent Driessen's branching model Contributors The following individuals have contributed to this project: (add your name here)","title":"Contributing"},{"location":"contributing.html#contributing","text":"Contributions in the form of \u270dIssues and \ud83d\udee0Pull requests are welcomed and encouraged.","title":"Contributing"},{"location":"contributing.html#how-to-contribute","text":"In order to contribute to this project: Fork this repository Create a new branch and commit your feature or bugfix Once you have finished, create a Pull Request to merge your changes into remote's develop branch Do not forget to add your name at the end of this file.","title":"How to contribute"},{"location":"contributing.html#recommendations","text":"This project adheres to: Contributor Covenant : A Code of Conduct for Open Source Projects Keep a Changelog : Good practices for changelog file pds/skeleton : Standard PHP package skeleton Vincent Driessen's branching model : A branching model for Git Semantic Versioning : Simple rules for version numbers It's encouraged to use: The seven rules of a great Git commit message : How to Write a good Git Commit Message git-flow : Git extensions to provide high-level repository operations for Vincent Driessen's branching model","title":"Recommendations"},{"location":"contributing.html#contributors","text":"The following individuals have contributed to this project: (add your name here)","title":"Contributors"},{"location":"detection-algorithm.html","text":"Detection algorithm When \\Jawira\\CaseConverter\\Convert class is instantiated, the input string is analysed to detect the words in it. This is also the algorithm used by Convert::fromAuto method. If input string contains _ (underscore character), then _ is used to split string. If input string contains - (dash character), then - is used to split string. If input string contains \u2423 (space character), then \u2423 is used to split string. If input string contains . (space character), then . is used to split string. If input string contains uppercase characters only, then the input string is considered to be a single word. Finally, uppercase characters are used to split string.","title":"Detection algorithm"},{"location":"detection-algorithm.html#detection-algorithm","text":"When \\Jawira\\CaseConverter\\Convert class is instantiated, the input string is analysed to detect the words in it. This is also the algorithm used by Convert::fromAuto method. If input string contains _ (underscore character), then _ is used to split string. If input string contains - (dash character), then - is used to split string. If input string contains \u2423 (space character), then \u2423 is used to split string. If input string contains . (space character), then . is used to split string. If input string contains uppercase characters only, then the input string is considered to be a single word. Finally, uppercase characters are used to split string.","title":"Detection algorithm"},{"location":"dev.html","text":"Development notes Phing targets $ phing setup : Prepare project for development. $ phing qa : Run quality tests, use this before every commit. Dev requirements To use Phing tasks you need to previously install: Phive mkdocs mkdocs-material Composer Using Phing behind a proxy If you are developing behind a proxy, you have to set the environment variable http_proxy . This variable already is imported in build.xml , so you have nothing to do. Conventions This project adheres to: git-flow Semantic Versioning Keep a changelog pds/skeleton Creating new convention Create new Gluer class Create new split car Update \\Jawira\\CaseConverter\\Convert::analyse if needed Register into \\Jawira\\CaseConverter\\Convert::handleSplitterMethod Register into \\Jawira\\CaseConverter\\Convert::handleGluerMethod Update docblock \\Jawira\\CaseConverter\\Convert to register new methods. Update documentation Class diagrams","title":"Dev"},{"location":"dev.html#development-notes","text":"","title":"Development notes"},{"location":"dev.html#phing-targets","text":"$ phing setup : Prepare project for development. $ phing qa : Run quality tests, use this before every commit.","title":"Phing targets"},{"location":"dev.html#dev-requirements","text":"To use Phing tasks you need to previously install: Phive mkdocs mkdocs-material Composer","title":"Dev requirements"},{"location":"dev.html#using-phing-behind-a-proxy","text":"If you are developing behind a proxy, you have to set the environment variable http_proxy . This variable already is imported in build.xml , so you have nothing to do.","title":"Using Phing behind a proxy"},{"location":"dev.html#conventions","text":"This project adheres to: git-flow Semantic Versioning Keep a changelog pds/skeleton","title":"Conventions"},{"location":"dev.html#creating-new-convention","text":"Create new Gluer class Create new split car Update \\Jawira\\CaseConverter\\Convert::analyse if needed Register into \\Jawira\\CaseConverter\\Convert::handleSplitterMethod Register into \\Jawira\\CaseConverter\\Convert::handleGluerMethod Update docblock \\Jawira\\CaseConverter\\Convert to register new methods. Update documentation","title":"Creating new convention"},{"location":"dev.html#class-diagrams","text":"","title":"Class diagrams"},{"location":"examples.html","text":"Examples To use Case Converter you have to instantiate Convert class, then you should call to*() methods. Basic usage Code: ?php declare ( strict_types = 1 ); require __DIR__ . /vendor/autoload.php ; use Jawira\\CaseConverter\\Convert ; $robot = new Convert ( The-Terminator ); echo $robot - toPascal () . PHP_EOL ; echo $robot - toCobol () . PHP_EOL ; echo $robot - toSnake () . PHP_EOL ; Output: TheTerminator THE-TERMINATOR the_terminator Explicit case detection In some edge cases you have to explicitly set the format of input string to have the desired output: ?php declare ( strict_types = 1 ); require __DIR__ . /vendor/autoload.php ; use Jawira\\CaseConverter\\Convert ; $agency = new Convert ( FBI ); $agency - fromAda (); echo $agency - toCobol (); // output: FBI echo $agency - toSnake (); // output: fbi $agency - fromCamel (); echo $agency - toCobol (); // output: F-B-I echo $agency - toSnake (); // output: f_b_i $agency - fromAuto (); echo $agency - toCobol (); // output: FBI echo $agency - toSnake (); // output: fbi Force Simple Case-Mapping You can still use Simple Case-Mapping even if you are using PHP 7.3 or newer: ?php declare ( strict_types = 1 ); require __DIR__ . /vendor/autoload.php ; use Jawira\\CaseConverter\\Convert ; $robot = new Convert ( Stra\u00dfe ); $robot - forceSimpleCaseMapping (); echo $robot - toMacro (); // output: STRA\u00dfE Learn more about Case-Mapping . Using the factory CaseConverter factory is going to instantiate Convert class for you. Everything else is the same: // Convert string to Pascal case $this- cc- convert( XML )- toPascal(); // Xml // Convert string to Snake case $this- cc- convert( v3.0.2 )- toSnake(); // v3_0_2 // Convert string to Camel case $this- cc- convert( first-name )- toCamel(); // firstName // Convert from Lower case to Dot case $this- cc- convert( non-SI units )- fromLower()- toDot(); // non-si.units // Get detected words $this- cc- convert( Mario Bros )- toArray(); // [ Mario , Bros ] // Retrieve original string $this- cc- convert( use_the_force )- getSource(); // use_the_force","title":"Examples"},{"location":"examples.html#examples","text":"To use Case Converter you have to instantiate Convert class, then you should call to*() methods.","title":"Examples"},{"location":"examples.html#basic-usage","text":"Code: ?php declare ( strict_types = 1 ); require __DIR__ . /vendor/autoload.php ; use Jawira\\CaseConverter\\Convert ; $robot = new Convert ( The-Terminator ); echo $robot - toPascal () . PHP_EOL ; echo $robot - toCobol () . PHP_EOL ; echo $robot - toSnake () . PHP_EOL ; Output: TheTerminator THE-TERMINATOR the_terminator","title":"Basic usage"},{"location":"examples.html#explicit-case-detection","text":"In some edge cases you have to explicitly set the format of input string to have the desired output: ?php declare ( strict_types = 1 ); require __DIR__ . /vendor/autoload.php ; use Jawira\\CaseConverter\\Convert ; $agency = new Convert ( FBI ); $agency - fromAda (); echo $agency - toCobol (); // output: FBI echo $agency - toSnake (); // output: fbi $agency - fromCamel (); echo $agency - toCobol (); // output: F-B-I echo $agency - toSnake (); // output: f_b_i $agency - fromAuto (); echo $agency - toCobol (); // output: FBI echo $agency - toSnake (); // output: fbi","title":"Explicit case detection"},{"location":"examples.html#force-simple-case-mapping","text":"You can still use Simple Case-Mapping even if you are using PHP 7.3 or newer: ?php declare ( strict_types = 1 ); require __DIR__ . /vendor/autoload.php ; use Jawira\\CaseConverter\\Convert ; $robot = new Convert ( Stra\u00dfe ); $robot - forceSimpleCaseMapping (); echo $robot - toMacro (); // output: STRA\u00dfE Learn more about Case-Mapping .","title":"Force Simple Case-Mapping"},{"location":"examples.html#using-the-factory","text":"CaseConverter factory is going to instantiate Convert class for you. Everything else is the same: // Convert string to Pascal case $this- cc- convert( XML )- toPascal(); // Xml // Convert string to Snake case $this- cc- convert( v3.0.2 )- toSnake(); // v3_0_2 // Convert string to Camel case $this- cc- convert( first-name )- toCamel(); // firstName // Convert from Lower case to Dot case $this- cc- convert( non-SI units )- fromLower()- toDot(); // non-si.units // Get detected words $this- cc- convert( Mario Bros )- toArray(); // [ Mario , Bros ] // Retrieve original string $this- cc- convert( use_the_force )- getSource(); // use_the_force","title":"Using the factory"},{"location":"known-issues.html","text":"Known issues Number is not a word When using case-converter you cannot use a number as separator. In practice this means that a number is not considered as a word: As shown in the previous example, there is no way to go back to the original input string (i.e. hello-8-world ), in kebab case this sting is written as hello8-world . Other example: Code Output $name- toDot('REEL2REAL'); r.e.e.l2.r.e.a.l $name- toDot('reel2real'); reel2real $name- toDot('Reel2Real'); reel2.real","title":"Known issues"},{"location":"known-issues.html#known-issues","text":"","title":"Known issues"},{"location":"known-issues.html#number-is-not-a-word","text":"When using case-converter you cannot use a number as separator. In practice this means that a number is not considered as a word: As shown in the previous example, there is no way to go back to the original input string (i.e. hello-8-world ), in kebab case this sting is written as hello8-world . Other example: Code Output $name- toDot('REEL2REAL'); r.e.e.l2.r.e.a.l $name- toDot('reel2real'); reel2real $name- toDot('Reel2Real'); reel2.real","title":"Number is not a word"},{"location":"license.html","text":"The MIT License (MIT) Copyright \u00a9 2015-2019 Jawira Portugal Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license.html#the-mit-license-mit","text":"Copyright \u00a9 2015-2019 Jawira Portugal Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"},{"location":"naming-conventions.html","text":"Naming conventions Naming conventions are also referred as: Naming style Case convention Reference matrix Lower case Title case Upper case Sentence case _ (underscore) Snake case Ada case Macro case - - (dash) Kebab case Train case Cobol case - . (dot) Dot notation - - - \u2423 (space) Lower case Title case Upper case Sentence case (empty string) - Camel case Pascal case - - Description table (wip) Convention name Description Usage AKA Camel case PHP method names Camel caps, Medial capitals, Lower camel case Pascal case PHP class names Upper camel case Snake case All letters in lower-case separated with a _ (underscore) PHP functions Ada case Macro case PHP constants Kebab case Train case Cobol case Dot notation Lower case Title case Upper case Sentence case Resources https://dev.to/prahladyeri/underscores-camelcasing-and-pascalcasing-the-three-naming-conventions-every-programmer-should-be-aware-of-3aed https://en.wikipedia.org/wiki/Letter_case https://en.wikipedia.org/wiki/Naming_convention_(programming)","title":"Naming conventions"},{"location":"naming-conventions.html#naming-conventions","text":"Naming conventions are also referred as: Naming style Case convention","title":"Naming conventions"},{"location":"naming-conventions.html#reference-matrix","text":"Lower case Title case Upper case Sentence case _ (underscore) Snake case Ada case Macro case - - (dash) Kebab case Train case Cobol case - . (dot) Dot notation - - - \u2423 (space) Lower case Title case Upper case Sentence case (empty string) - Camel case Pascal case - -","title":"Reference matrix"},{"location":"naming-conventions.html#description-table-wip","text":"Convention name Description Usage AKA Camel case PHP method names Camel caps, Medial capitals, Lower camel case Pascal case PHP class names Upper camel case Snake case All letters in lower-case separated with a _ (underscore) PHP functions Ada case Macro case PHP constants Kebab case Train case Cobol case Dot notation Lower case Title case Upper case Sentence case","title":"Description table (wip)"},{"location":"naming-conventions.html#resources","text":"https://dev.to/prahladyeri/underscores-camelcasing-and-pascalcasing-the-three-naming-conventions-every-programmer-should-be-aware-of-3aed https://en.wikipedia.org/wiki/Letter_case https://en.wikipedia.org/wiki/Naming_convention_(programming)","title":"Resources"},{"location":"using-the-factory.html","text":"Using the factory Besides \\Jawira\\CaseConverter\\Convert you also have at your disposal: \\Jawira\\CaseConverter\\CaseConverter \\Jawira\\CaseConverter\\CaseConverterInterface Instead of using new Convert(); you can use the convenience method from CaseConverter class. In concrete, you have to call \\Jawira\\CaseConverter\\CaseConverter::convert to create Convert objects. Here an example: ?php namespace My\\App ; use Jawira\\CaseConverter\\CaseConverterInterface ; class MySuperNameCreator { protected $cc ; public function __construct ( CaseConverterInterface $cc ) { $this - cc = $cc ; } public function variableName ( string $slug ) : string { // `- convert()` returns a `Convert` object. $myConvert = $this - cc - convert ( $slug ); return $myConvert - toCamel (); } public function constantName ( string $slug ) : string { // Of course you can also chain everything. return $this - cc - convert ( $slug ) - fromKebab () - toMacro (); } } Please note that an interface - CaseConverterInterface - is also provided. If you are using Symfony you can use this interface with Symfony autowiring to automatically instantiate CaseConverter , otherwise if you are working in a standalone project you should try php-di project . Using \\Jawira\\CaseConverter\\CaseConverter::convert is preferred because: Usually the new operator is considered harmful. You can easily mock dependencies when writing tests. It's SOLID","title":"Using the factory"},{"location":"using-the-factory.html#using-the-factory","text":"Besides \\Jawira\\CaseConverter\\Convert you also have at your disposal: \\Jawira\\CaseConverter\\CaseConverter \\Jawira\\CaseConverter\\CaseConverterInterface Instead of using new Convert(); you can use the convenience method from CaseConverter class. In concrete, you have to call \\Jawira\\CaseConverter\\CaseConverter::convert to create Convert objects. Here an example: ?php namespace My\\App ; use Jawira\\CaseConverter\\CaseConverterInterface ; class MySuperNameCreator { protected $cc ; public function __construct ( CaseConverterInterface $cc ) { $this - cc = $cc ; } public function variableName ( string $slug ) : string { // `- convert()` returns a `Convert` object. $myConvert = $this - cc - convert ( $slug ); return $myConvert - toCamel (); } public function constantName ( string $slug ) : string { // Of course you can also chain everything. return $this - cc - convert ( $slug ) - fromKebab () - toMacro (); } } Please note that an interface - CaseConverterInterface - is also provided. If you are using Symfony you can use this interface with Symfony autowiring to automatically instantiate CaseConverter , otherwise if you are working in a standalone project you should try php-di project . Using \\Jawira\\CaseConverter\\CaseConverter::convert is preferred because: Usually the new operator is considered harmful. You can easily mock dependencies when writing tests. It's SOLID","title":"Using the factory"}]}